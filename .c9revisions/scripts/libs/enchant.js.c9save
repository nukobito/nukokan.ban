{"ts":1370514455504,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n * enchant.js v0.7.0\n * http://enchantjs.com\n *\n * Copyright Ubiquitous Entertainment Inc.\n * Released under the MIT license.\n */\n\n(function(window, undefined){\n\n/**\n * ECMA-262 5th edition Functions\n */\nif (typeof Object.defineProperty !== 'function') {\n    Object.defineProperty = function(obj, prop, desc) {\n        if ('value' in desc) {\n            obj[prop] = desc.value;\n        }\n        if ('get' in desc) {\n            obj.__defineGetter__(prop, desc.get);\n        }\n        if ('set' in desc) {\n            obj.__defineSetter__(prop, desc.set);\n        }\n        return obj;\n    };\n}\nif (typeof Object.defineProperties !== 'function') {\n    Object.defineProperties = function(obj, descs) {\n        for (var prop in descs) {\n            if (descs.hasOwnProperty(prop)) {\n                Object.defineProperty(obj, prop, descs[prop]);\n            }\n        }\n        return obj;\n    };\n}\nif (typeof Object.create !== 'function') {\n    Object.create = function(prototype, descs) {\n        function F() {\n        }\n\n        F.prototype = prototype;\n        var obj = new F();\n        if (descs != null) {\n            Object.defineProperties(obj, descs);\n        }\n        return obj;\n    };\n}\nif (typeof Object.getPrototypeOf !== 'function') {\n    Object.getPrototypeOf = function(obj) {\n        return obj.__proto__;\n    };\n}\n\nif (typeof Function.prototype.bind !== 'function') {\n    Function.prototype.bind = function(thisObject) {\n        var func = this;\n        var args = Array.prototype.slice.call(arguments, 1);\n        var Nop = function() {\n        };\n        var bound = function() {\n            var a = args.concat(Array.prototype.slice.call(arguments));\n            return func.apply(\n                this instanceof Nop ? this : thisObject || window, a);\n        };\n        Nop.prototype = func.prototype;\n        bound.prototype = new Nop();\n        return bound;\n    };\n}\n\nwindow.getTime = (function() {\n    var origin;\n    if (window.performance && window.performance.now) {\n        origin = Date.now();\n        return function() {\n            return origin + window.performance.now();\n        };\n    } else if (window.performance && window.performance.webkitNow) {\n        origin = Date.now();\n        return function() {\n            return origin + window.performance.webkitNow();\n        };\n    } else {\n        return Date.now;\n    }\n}());\n\n/**\n * define requestAnimationFrame\n */\nwindow.requestAnimationFrame =\n    window.requestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    (function() {\n        var lastTime = window.getTime();\n        var frame = 1000 / 60;\n        return function(func) {\n            var _id = setTimeout(function() {\n                lastTime = window.getTime();\n                func(lastTime);\n            }, Math.max(0, lastTime + frame - window.getTime()));\n            return _id;\n        };\n    }());\n\n/**\n * グローバルにライブラリのクラスをエクスポートする.\n *\n * 引数に何も渡さない場合enchant.jsで定義されたクラス及びプラグインで定義されたクラス\n * 全てがエクスポートされる. 引数が一つ以上の場合はenchant.jsで定義されたクラスのみ\n * がデフォルトでエクスポートされ, プラグインのクラスをエクスポートしたい場合は明示的に\n * プラグインの識別子を引数として渡す必要がある.\n *\n * @example\n *   enchant();     // 全てのクラスがエクスポートされる\n *   enchant('');   // enchant.js本体のクラスのみがエクスポートされる\n *   enchant('ui'); // enchant.js本体のクラスとui.enchant.jsのクラスがエクスポートされる\n *\n * @param {...String} [modules] エクスポートするモジュール. 複数指定できる.\n * @global\n * @type {Object}\n * @name enchant\n */\nvar enchant = function(modules) {\n    if (modules != null) {\n        if (!(modules instanceof Array)) {\n            modules = Array.prototype.slice.call(arguments);\n        }\n        modules = modules.filter(function(module) {\n            return [module].join();\n        });\n    }\n    (function include(module, prefix) {\n        var submodules = [],\n            i, len;\n        for (var prop in module) {\n            if (module.hasOwnProperty(prop)) {\n                if (typeof module[prop] === 'function') {\n                    window[prop] = module[prop];\n                } else if (typeof module[prop] === 'object' && module[prop] !== null && Object.getPrototypeOf(module[prop]) === Object.prototype) {\n                    if (modules == null) {\n                        submodules.push(prop);\n                    } else {\n                        i = modules.indexOf(prefix + prop);\n                        if (i !== -1) {\n                            submodules.push(prop);\n                            modules.splice(i, 1);\n                        }\n                    }\n                }\n            }\n        }\n\n        for (i = 0, len = submodules.length; i < len; i++) {\n            include(module[submodules[i]], prefix + submodules[i] + '.');\n        }\n    }(enchant, ''));\n\n    // issue 185\n    if (enchant.Class.getInheritanceTree(window.Game).length <= enchant.Class.getInheritanceTree(window.Core).length) {\n        window.Game = window.Core;\n    }\n\n    if (modules != null && modules.length) {\n        throw new Error('Cannot load module: ' + modules.join(', '));\n    }\n};\n\n/**\n * export enchant\n */\nwindow.enchant = enchant;\n\nwindow.addEventListener(\"message\", function(msg, origin) {\n    try {\n        var data = JSON.parse(msg.data);\n        if (data.type === \"event\") {\n            enchant.Core.instance.dispatchEvent(new enchant.Event(data.value));\n        } else if (data.type === \"debug\") {\n            switch (data.value) {\n                case \"start\":\n                    enchant.Core.instance.start();\n                    break;\n                case \"pause\":\n                    enchant.Core.instance.pause();\n                    break;\n                case \"resume\":\n                    enchant.Core.instance.resume();\n                    break;\n                case \"tick\":\n                    enchant.Core.instance._tick();\n                    break;\n                default:\n                    break;\n            }\n        }\n    } catch (e) {\n        // ignore\n    }\n}, false);\n\n/**\n * @name enchant.Class\n * @class\n * クラスのクラス.\n *\n * @param {Function} [superclass] 継承するクラス.\n * @param {*} definition クラス定義.\n * @constructor\n */\nenchant.Class = function(superclass, definition) {\n    return enchant.Class.create(superclass, definition);\n};\n\n/**\n * クラスを作成する.\n *\n * ほかのクラスを継承したクラスを作成する場合, コンストラクタはデフォルトで\n * 継承元のクラスのものが使われる. コンストラクタをオーバーライドする場合継承元の\n * コンストラクタを適用するには明示的に呼び出す必要がある.\n *\n * @example\n *   var Ball = Class.create({ // 何も継承しないクラスを作成する\n *       initialize: function(radius) { ... }, // メソッド定義\n *       fall: function() { ... }\n *   });\n *\n *   var Ball = Class.create(Sprite);  // Spriteを継承したクラスを作成する\n *   var Ball = Class.create(Sprite, { // Spriteを継承したクラスを作成する\n *       initialize: function(radius) { // コンストラクタを上書きする\n *          Sprite.call(this, radius*2, radius*2); // 継承元のコンストラクタを適用する\n *          this.image = core.assets['ball.gif'];\n *       }\n *   });\n *\n * @param {Function} [superclass] 継承するクラス.\n * @param {*} [definition] クラス定義.\n * @static\n */\nenchant.Class.create = function(superclass, definition) {\n    if (superclass == null && definition){\n        throw new Error(\"superclass is undefined (enchant.Class.create)\");\n    }else if(superclass == null){\n        throw new Error(\"definition is undefined (enchant.Class.create)\");\n    }\n\n    if (arguments.length === 0) {\n        return enchant.Class.create(Object, definition);\n    } else if (arguments.length === 1 && typeof arguments[0] !== 'function') {\n        return enchant.Class.create(Object, arguments[0]);\n    }\n\n    for (var prop in definition) {\n        if (definition.hasOwnProperty(prop)) {\n            if (typeof definition[prop] === 'object' && definition[prop] !== null && Object.getPrototypeOf(definition[prop]) === Object.prototype) {\n                if (!('enumerable' in definition[prop])) {\n                    definition[prop].enumerable = true;\n                }\n            } else {\n                definition[prop] = { value: definition[prop], enumerable: true, writable: true };\n            }\n        }\n    }\n    var Constructor = function() {\n        if (this instanceof Constructor) {\n            Constructor.prototype.initialize.apply(this, arguments);\n        } else {\n            return new Constructor();\n        }\n    };\n    Constructor.prototype = Object.create(superclass.prototype, definition);\n    Constructor.prototype.constructor = Constructor;\n    if (Constructor.prototype.initialize == null) {\n        Constructor.prototype.initialize = function() {\n            superclass.apply(this, arguments);\n        };\n    }\n\n    var tree = this.getInheritanceTree(superclass);\n    for (var i = 0, l = tree.length; i < l; i++) {\n        if (typeof tree[i]._inherited === 'function') {\n            tree[i]._inherited(Constructor);\n            break;\n        }\n    }\n\n    return Constructor;\n};\n\n/**\n * クラスの継承関係を取得する.\n * @param {ConstructorFunction}\n * @return {...ConstructorFunction}\n */\nenchant.Class.getInheritanceTree = function(Constructor) {\n    var ret = [];\n    var C = Constructor;\n    var proto = C.prototype;\n    while (C !== Object) {\n        ret.push(C);\n        proto = Object.getPrototypeOf(proto);\n        C = proto.constructor;\n    }\n    return ret;\n};\n\n/**\n * @namespace\n * enchant.js の環境変数.\n * new Core() を呼ぶ前に変更することで変更することで, 動作設定を変えることができる.\n * @type {Object}\n */\nenchant.ENV = {\n    /**\n     * Version of enchant.js\n     * @type {String}\n     */\n    VERSION: \"0.6.1\",\n    /**\n     * The CSS vendor prefix of the current browser.\n     * @type {String}\n     */\n    VENDOR_PREFIX: (function() {\n        var ua = navigator.userAgent;\n        if (ua.indexOf('Opera') !== -1) {\n            return 'O';\n        } else if (ua.indexOf('MSIE') !== -1) {\n            return 'ms';\n        } else if (ua.indexOf('WebKit') !== -1) {\n            return 'webkit';\n        } else if (navigator.product === 'Gecko') {\n            return 'Moz';\n        } else {\n            return '';\n        }\n    }()),\n    /**\n     * Determines if the current browser supports touch.\n     * @type {Boolean} True, if touch is enabled.\n     */\n    TOUCH_ENABLED: (function() {\n        var div = document.createElement('div');\n        div.setAttribute('ontouchstart', 'return');\n        return typeof div.ontouchstart === 'function';\n    }()),\n    /**\n     * Determines if the current browser is an iPhone with a retina display.\n     * @return {Boolean} True, if this display is a retina display\n     */\n    RETINA_DISPLAY: (function() {\n        if (navigator.userAgent.indexOf('iPhone') !== -1 && window.devicePixelRatio === 2) {\n            var viewport = document.querySelector('meta[name=\"viewport\"]');\n            if (viewport == null) {\n                viewport = document.createElement('meta');\n                document.head.appendChild(viewport);\n            }\n            viewport.setAttribute('content', 'width=640');\n            return true;\n        } else {\n            return false;\n        }\n    }()),\n    /**\n     * Determines if for current browser Flash should be used to play \n     * sound instead of the native audio class.\n     * @type {Boolean} True, if flash should be used.\n     */\n    USE_FLASH_SOUND: (function() {\n        var ua = navigator.userAgent;\n        var vendor = navigator.vendor || \"\";\n        // non-local access, not on mobile mobile device, not on safari\n        return (location.href.indexOf('http') === 0 && ua.indexOf('Mobile') === -1 && vendor.indexOf('Apple') !== -1);\n    }()),\n    /**\n     * If click/touch event occure for these tags the setPreventDefault() method will not be called.\n     */\n    USE_DEFAULT_EVENT_TAGS: ['input', 'textarea', 'select', 'area'],\n    CANVAS_DRAWING_METHODS: [\n        'putImageData', 'drawImage', 'drawFocusRing', 'fill', 'stroke',\n        'clearRect', 'fillRect', 'strokeRect', 'fillText', 'strokeText'\n    ],\n    /**\n     * Keybind Table.\n     * You can use 'left', 'up', 'right', 'down', 'a', 'b' for preset event.\n     * @example\n     * enchant.ENV.KEY_BIND_TABLE = {\n     *    37: 'left',\n     *    38: 'up',\n     *    39: 'right',\n     *    40: 'down',\n     *    32: 'a', //-> use 'space' key as 'a button'\n     * }\n     */\n    KEY_BIND_TABLE: {\n        37: 'left',\n        38: 'up',\n        39: 'right',\n        40: 'down'\n    },\n    PREVENT_DEFAULT_KEY_CODES: [37, 38, 39, 40, 32],\n    /**\n     * @type {Boolean}\n     */\n    SOUND_ENABLED_ON_MOBILE_SAFARI: false,\n    /**\n     * Determines if WebAudioAPI is enabled. (true: use WebAudioAPI instead of Audio element if possible)\n     */\n    USE_WEBAUDIO: (function(){\n        return location.protocol !== 'file:';\n    }()),\n    /**\n     * Determines if animation feature is enabled. (true: Timeline instance will be generated in new Node)\n     */\n    USE_ANIMATION: true\n};\n\n/**\n * @scope enchant.Event.prototype\n */\nenchant.Event = enchant.Class.create({\n    /**\n     * @name enchant.Event\n     * @class\n     * DOM Event風味の独自イベント実装を行ったクラス.\n     * ただしフェーズの概念はなし.\n     * @param {String} type Eventのタイプ\n     * @constructs\n     */\n    initialize: function(type) {\n        /**\n         * イベントのタイプ.\n         * @type {String}\n         */\n        this.type = type;\n        /**\n         * イベントのターゲット.\n         * @type {*}\n         */\n        this.target = null;\n        /**\n         * イベント発生位置のx座標.\n         * @type {Number}\n         */\n        this.x = 0;\n        /**\n         * イベント発生位置のy座標.\n         * @type {Number}\n         */\n        this.y = 0;\n        /**\n         * イベントを発行したオブジェクトを基準とするイベント発生位置のx座標.\n         * @type {Number}\n         */\n        this.localX = 0;\n        /**\n         * イベントを発行したオブジェクトを基準とするイベント発生位置のy座標.\n         * @type {Number}\n         */\n        this.localY = 0;\n    },\n    _initPosition: function(pageX, pageY) {\n        var core = enchant.Core.instance;\n        this.x = this.localX = (pageX - core._pageX) / core.scale;\n        this.y = this.localY = (pageY - core._pageY) / core.scale;\n    }\n});\n\n/**\n * Coreのロード完了時に発生するイベント.\n *\n * 画像のプリロードを行う場合ロードが完了するのを待ってゲーム開始時の処理を行う必要がある.\n * 発行するオブジェクト: {@link enchant.Core}\n *\n * @example\n *   var core = new Core(320, 320);\n *   core.preload('player.gif');\n *   core.onload = function() {\n *      ... // ゲーム開始時の処理を記述\n *   };\n *   core.start();\n * @type {String}\n */\nenchant.Event.LOAD = 'load';\n\n/**\n * エラーの発生をCoreに伝える際に発生するイベント.\n * 発行するオブジェクト: {@link enchant.Core}, {@link enchant.Surface}, {@link enchant.WebAudioSound}, {@link enchant.DOMSound}\n */\nenchant.Event.ERROR = 'error';\n\n/**\n * 表示サイズが変わったときに発生するイベント.\n * 発行するオブジェクト: {@link enchant.Core}, {@link enchant.Scene}\n @type {String}\n */\nenchant.Event.CORE_RESIZE = 'coreresize';\n\n/**\n * Coreのロード進行中に発生するイベント.\n * プリロードする画像が一枚ロードされる度に発行される. 発行するオブジェクト: {@link enchant.LoadingScene}\n * @type {String}\n */\nenchant.Event.PROGRESS = 'progress';\n\n/**\n * フレーム開始時に発生するイベント.\n * 発行するオブジェクト: {@link enchant.Core}, {@link enchant.Node}\n * @type {String}\n */\nenchant.Event.ENTER_FRAME = 'enterframe';\n\n/**\n * フレーム終了時に発生するイベント.\n * 発行するオブジェクト: {@link enchant.Core}\n * @type {String}\n */\nenchant.Event.EXIT_FRAME = 'exitframe';\n\n/**\n * Sceneが開始したとき発生するイベント.\n * 発行するオブジェクト: {@link enchant.Scene}\n * @type {String}\n */\nenchant.Event.ENTER = 'enter';\n\n/**\n * Sceneが終了したとき発生するイベント.\n * 発行するオブジェクト: {@link enchant.Scene}\n * @type {String}\n */\nenchant.Event.EXIT = 'exit';\n\n/**\n * Nodeに子が追加されたとき発生するイベント.\n * 発行するオブジェクト: {@link enchant.Group}, {@link enchant.Scene}\n * @type {String}\n */\nenchant.Event.CHILD_ADDED = 'childadded';\n\n/**\n * NodeがGroupに追加されたとき発生するイベント.\n * 発行するオブジェクト: {@link enchant.Node}\n * @type {String}\n */\nenchant.Event.ADDED = 'added';\n\n/**\n * NodeがSceneに追加されたとき発生するイベント.\n * 発行するオブジェクト: {@link enchant.Node}\n * @type {String}\n */\nenchant.Event.ADDED_TO_SCENE = 'addedtoscene';\n\n/**\n * Nodeから子が削除されたとき発生するイベント.\n * 発行するオブジェクト: {@link enchant.Group}, {@link enchant.Scene}\n * @type {String}\n * @type {String}\n */\nenchant.Event.CHILD_REMOVED = 'childremoved';\n\n/**\n * NodeがGroupから削除されたとき発生するイベント.\n * 発行するオブジェクト: {@link enchant.Node}\n * @type {String}\n */\nenchant.Event.REMOVED = 'removed';\n\n/**\n * NodeがSceneから削除されたとき発生するイベント.\n * 発行するオブジェクト: {@link enchant.Node}\n * @type {String}\n */\nenchant.Event.REMOVED_FROM_SCENE = 'removedfromscene';\n\n/**\n * Nodeに対するタッチが始まったとき発生するイベント.\n * クリックもタッチとして扱われる. 発行するオブジェクト: {@link enchant.Node}\n * @type {String}\n */\nenchant.Event.TOUCH_START = 'touchstart';\n\n/**\n * Nodeに対するタッチが移動したとき発生するイベント.\n * クリックもタッチとして扱われる. 発行するオブジェクト: {@link enchant.Node}\n * @type {String}\n */\nenchant.Event.TOUCH_MOVE = 'touchmove';\n\n/**\n * Nodeに対するタッチが終了したとき発生するイベント.\n * クリックもタッチとして扱われる. 発行するオブジェクト: enchant.Node\n * @type {String}\n */\nenchant.Event.TOUCH_END = 'touchend';\n\n/**\n * Entityがレンダリングされるときに発生するイベント.\n * 発行するオブジェクト: {@link enchant.Entity}\n * @type {String}\n */\nenchant.Event.RENDER = 'render';\n\n/**\n * ボタン入力が始まったとき発生するイベント.\n * 発行するオブジェクト: {@link enchant.Core}, {@link enchant.Scene}\n * @type {String}\n */\nenchant.Event.INPUT_START = 'inputstart';\n\n/**\n * ボタン入力が変化したとき発生するイベント.\n * 発行するオブジェクト: {@link enchant.Core}, {@link enchant.Scene}\n * @type {String}\n */\nenchant.Event.INPUT_CHANGE = 'inputchange';\n\n/**\n * ボタン入力が終了したとき発生するイベント.\n * 発行するオブジェクト: {@link enchant.Core}, {@link enchant.Scene}\n * @type {String}\n */\nenchant.Event.INPUT_END = 'inputend';\n\n/**\n * leftボタンが押された発生するイベント.\n * 発行するオブジェクト: {@link enchant.Core}, {@link enchant.Scene}\n * @type {String}\n */\nenchant.Event.LEFT_BUTTON_DOWN = 'leftbuttondown';\n\n/**\n * leftボタンが離された発生するイベント.\n * 発行するオブジェクト: {@link enchant.Core}, {@link enchant.Scene}\n * @type {String}\n */\nenchant.Event.LEFT_BUTTON_UP = 'leftbuttonup';\n\n/**\n * rightボタンが押された発生するイベント.\n * 発行するオブジェクト: {@link enchant.Core}, {@link enchant.Scene}\n * @type {String}\n */\nenchant.Event.RIGHT_BUTTON_DOWN = 'rightbuttondown';\n\n/**\n * rightボタンが離された発生するイベント.\n * 発行するオブジェクト: {@link enchant.Core}, {@link enchant.Scene}\n * @type {String}\n */\nenchant.Event.RIGHT_BUTTON_UP = 'rightbuttonup';\n\n/**\n * upボタンが押された発生するイベント.\n * 発行するオブジェクト: {@link enchant.Core}, {@link enchant.Scene}\n * @type {String}\n */\nenchant.Event.UP_BUTTON_DOWN = 'upbuttondown';\n\n/**\n * upボタンが離された発生するイベント.\n * 発行するオブジェクト: {@link enchant.Core}, {@link enchant.Scene}\n * @type {String}\n */\nenchant.Event.UP_BUTTON_UP = 'upbuttonup';\n\n/**\n * downボタンが離された発生するイベント.\n * 発行するオブジェクト: {@link enchant.Core}, {@link enchant.Scene}\n * @type {String}\n */\nenchant.Event.DOWN_BUTTON_DOWN = 'downbuttondown';\n\n/**\n * downボタンが離された発生するイベント.\n * 発行するオブジェクト: {@link enchant.Core}, {@link enchant.Scene}\n * @type {String}\n */\nenchant.Event.DOWN_BUTTON_UP = 'downbuttonup';\n\n/**\n * aボタンが押された発生するイベント.\n * 発行するオブジェクト: {@link enchant.Core}, {@link enchant.Scene}\n * @type {String}\n */\nenchant.Event.A_BUTTON_DOWN = 'abuttondown';\n\n/**\n * aボタンが離された発生するイベント.\n * 発行するオブジェクト: {@link enchant.Core}, {@link enchant.Scene}\n * @type {String}\n */\nenchant.Event.A_BUTTON_UP = 'abuttonup';\n\n/**\n * bボタンが押された発生するイベント.\n * 発行するオブジェクト: {@link enchant.Core}, {@link enchant.Scene}\n * @type {String}\n */\nenchant.Event.B_BUTTON_DOWN = 'bbuttondown';\n\n/**\n * bボタンが離された発生するイベント.\n * 発行するオブジェクト: {@link enchant.Core}, {@link enchant.Scene}\n * @type {String}\n */\nenchant.Event.B_BUTTON_UP = 'bbuttonup';\n\n/**\n * アクションがタイムラインに追加された時に発行されるイベント\n * @type {String}\n */\nenchant.Event.ADDED_TO_TIMELINE = \"addedtotimeline\";\n\n/**\n * アクションがタイムラインから削除された時に発行されるイベント\n * looped が設定されている時も、アクションは一度タイムラインから削除されもう一度追加される\n * @type {String}\n */\nenchant.Event.REMOVED_FROM_TIMELINE = \"removedfromtimeline\";\n\n/**\n * アクションが開始された時に発行されるイベント\n * @type {String}\n */\nenchant.Event.ACTION_START = \"actionstart\";\n\n/**\n * アクションが終了するときに発行されるイベント\n * @type {String}\n */\nenchant.Event.ACTION_END = \"actionend\";\n\n/**\n * アクションが1フレーム経過するときに発行されるイベント\n * @type {String}\n */\nenchant.Event.ACTION_TICK = \"actiontick\";\n\n/**\n * アクションが追加された時に、タイムラインに対して発行されるイベント\n * @type {String}\n */\nenchant.Event.ACTION_ADDED = \"actionadded\";\n\n/**\n * アクションが削除された時に、タイムラインに対して発行されるイベント\n * @type {String}\n */\nenchant.Event.ACTION_REMOVED = \"actionremoved\";\n\n/**\n * @scope enchant.EventTarget.prototype\n */\nenchant.EventTarget = enchant.Class.create({\n    /**\n     * @name enchant.EventTarget\n     * @class\n     * DOM Event風味の独自イベント実装を行ったクラス.\n     * ただしフェーズの概念はなし.\n     * @extends {enchant.Event}\n     * @constructs\n     */\n    initialize: function() {\n        this._listeners = {};\n    },\n    /**\n     * イベントリスナを追加する.\n     * @param {String} type イベントのタイプ.\n     * @param {function(e:enchant.Event)} listener 追加するイベントリスナ.\n     */\n    addEventListener: function(type, listener) {\n        var listeners = this._listeners[type];\n        if (listeners == null) {\n            this._listeners[type] = [listener];\n        } else if (listeners.indexOf(listener) === -1) {\n            listeners.unshift(listener);\n\n        }\n    },\n    /**\n     * Synonym for addEventListener\n     * @see {enchant.EventTarget#addEventListener}\n     * @param {String} type Type of the events.\n     * @param {function(e:enchant.Event)} listener Event listener to be added.\n     */\n    on: function() {\n        this.addEventListener.apply(this, arguments);\n    },\n    /**\n     * イベントリスナを削除する.\n     * @param {String} type イベントのタイプ.\n     * @param {function(e:enchant.Event)} listener 削除するイベントリスナ.\n     */\n    removeEventListener: function(type, listener) {\n        var listeners = this._listeners[type];\n        if (listeners != null) {\n            var i = listeners.indexOf(listener);\n            if (i !== -1) {\n                listeners.splice(i, 1);\n            }\n        }\n    },\n    /**\n     * すべてのイベントリスナを削除する.\n     * @param [String] type イベントのタイプ.\n     */\n    clearEventListener: function(type) {\n        if (type != null) {\n            delete this._listeners[type];\n        } else {\n            this._listeners = {};\n        }\n    },\n    /**\n     * イベントを発行する.\n     * @param {enchant.Event} e 発行するイベント.\n     */\n    dispatchEvent: function(e) {\n        e.target = this;\n        e.localX = e.x - this._offsetX;\n        e.localY = e.y - this._offsetY;\n        if (this['on' + e.type] != null){\n            this['on' + e.type](e);\n        }\n        var listeners = this._listeners[e.type];\n        if (listeners != null) {\n            listeners = listeners.slice();\n            for (var i = 0, len = listeners.length; i < len; i++) {\n                listeners[i].call(this, e);\n            }\n        }\n    }\n});\n\n/**\n * @scope enchant.Core.prototype\n */\n(function() {\n    var core;\n    /**\n     * @scope enchant.Core.prototype\n     */\n    enchant.Core = enchant.Class.create(enchant.EventTarget, {\n        /**\n         * @name enchant.Core\n         * @class\n         * アプリケーションのメインループ, シーンを管理するクラス.\n         *\n         * インスタンスは一つしか存在することができず, すでにインスタンスが存在する状態で\n         * コンストラクタを実行した場合既存のものが上書きされる. 存在するインスタンスには\n         * enchant.Core.instanceからアクセスできる.\n         *\n         * @param {Number} width 画面の横幅.\n         * @param {Number} height 画面の高さ.\n         * @constructs\n         * @extends enchant.EventTarget\n         */\n        initialize: function(width, height) {\n            if (window.document.body === null) {\n                // @TODO postpone initialization after window.onload\n                throw new Error(\"document.body is null. Please excute 'new Core()' in window.onload.\");\n            }\n\n            enchant.EventTarget.call(this);\n            var initial = true;\n            if (core) {\n                initial = false;\n                core.stop();\n            }\n            core = enchant.Core.instance = this;\n\n            this._calledTime = 0;\n            this._mousedownID = 0;\n            this._surfaceID = 0;\n            this._soundID = 0;\n\n            this._scenes = [];\n\n            width = width || 320;\n            height = height || 320;\n\n            var stage = document.getElementById('enchant-stage');\n            var scale, sWidth, sHeight;\n            if (!stage) {\n                stage = document.createElement('div');\n                stage.id = 'enchant-stage';\n                stage.style.position = 'absolute';\n\n                if (document.body.firstChild) {\n                    document.body.insertBefore(stage, document.body.firstChild);\n                } else {\n                    document.body.appendChild(stage);\n                }\n                scale = Math.min(\n                    window.innerWidth / width,\n                    window.innerHeight / height\n                );\n                this._pageX = 0;\n                this._pageY = 0;\n            } else {\n                var style = window.getComputedStyle(stage);\n                sWidth = parseInt(style.width, 10);\n                sHeight = parseInt(style.height, 10);\n                if (sWidth && sHeight) {\n                    scale = Math.min(\n                        sWidth / width,\n                        sHeight / height\n                    );\n                } else {\n                    scale = 1;\n                }\n                while (stage.firstChild) {\n                    stage.removeChild(stage.firstChild);\n                }\n                stage.style.position = 'relative';\n\n                var bounding = stage.getBoundingClientRect();\n                this._pageX = Math.round(window.scrollX || window.pageXOffset + bounding.left);\n                this._pageY = Math.round(window.scrollY || window.pageYOffset + bounding.top);\n            }\n            stage.style.fontSize = '12px';\n            stage.style.webkitTextSizeAdjust = 'none';\n            this._element = stage;\n\n            this.addEventListener('coreresize', this._oncoreresize);\n\n            this._width = width;\n            this._height = height;\n            this.scale = scale;\n\n            /**\n             * フレームレート.\n             * @type {Number}\n             */\n            this.fps = 30;\n            /**\n             * アプリの開始からのフレーム数.\n             * @type {Number}\n             */\n            this.frame = 0;\n            /**\n             * アプリが実行可能な状態かどうか.\n             * @type {Boolean}\n             */\n            this.ready = false;\n            /**\n             * アプリが実行状態かどうか.\n             * @type {Boolean}\n             */\n            this.running = false;\n            /**\n             * ロードされた画像をパスをキーとして保存するオブジェクト.\n             * @type {Object.<String, Surface>}\n             */\n            this.assets = {};\n            var assets = this._assets = [];\n            (function detectAssets(module) {\n                if (module.assets) {\n                    enchant.Core.instance.preload(module.assets);\n                }\n                for (var prop in module) {\n                    if (module.hasOwnProperty(prop)) {\n                        if (typeof module[prop] === 'object' && module[prop] !== null && Object.getPrototypeOf(module[prop]) === Object.prototype) {\n                            detectAssets(module[prop]);\n                        }\n                    }\n                }\n            }(enchant));\n\n            /**\n             * 現在のScene. Sceneスタック中の一番上のScene.\n             * @type {enchant.Scene}\n             */\n            this.currentScene = null;\n            /**\n             * ルートScene. Sceneスタック中の一番下のScene.\n             * @type {enchant.Scene}\n             */\n            this.rootScene = new enchant.Scene();\n            this.pushScene(this.rootScene);\n            /**\n             * ローディング時に表示されるScene.\n             * @type {enchant.Scene}\n             */\n            this.loadingScene = new enchant.LoadingScene();\n\n            /**\n             * 一度でも game.start() が呼ばれたことがあるかどうか。\n             * @type {Boolean}\n             * @private\n             */\n            this._activated = false;\n\n            this._offsetX = 0;\n            this._offsetY = 0;\n\n            /**\n             * アプリに対する入力状態を保存するオブジェクト.\n             * @type {Object.<String, Boolean>}\n             */\n            this.input = {};\n            if (!enchant.ENV.KEY_BIND_TABLE) {\n                enchant.ENV.KEY_BIND_TABLE = {};\n            }\n            this._keybind = enchant.ENV.KEY_BIND_TABLE;\n            this.pressedKeysNum = 0;\n            this._internalButtondownListeners = {};\n            this._internalButtonupListeners = {};\n\n            for (var prop in this._keybind) {\n                this.keybind(prop, this._keybind[prop]);\n            }\n\n            if (initial) {\n                stage = enchant.Core.instance._element;\n                var evt;\n                document.addEventListener('keydown', function(e) {\n                    core.dispatchEvent(new enchant.Event('keydown'));\n                    if (enchant.ENV.PREVENT_DEFAULT_KEY_CODES.indexOf(e.keyCode) !== -1) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                    }\n\n                    if (!core.running) {\n                        return;\n                    }\n                    var button = core._keybind[e.keyCode];\n                    if (button) {\n                        evt = new enchant.Event(button + 'buttondown');\n                        core.dispatchEvent(evt);\n                    }\n                }, true);\n                document.addEventListener('keyup', function(e) {\n                    if (!core.running) {\n                        return;\n                    }\n                    var button = core._keybind[e.keyCode];\n                    if (button) {\n                        evt = new enchant.Event(button + 'buttonup');\n                        core.dispatchEvent(evt);\n                    }\n                }, true);\n\n                if (enchant.ENV.TOUCH_ENABLED) {\n                    stage.addEventListener('touchstart', function(e) {\n                        var tagName = (e.target.tagName).toLowerCase();\n                        if (enchant.ENV.USE_DEFAULT_EVENT_TAGS.indexOf(tagName) === -1) {\n                            e.preventDefault();\n                            if (!core.running) {\n                                e.stopPropagation();\n                            }\n                        }\n                    }, true);\n                    stage.addEventListener('touchmove', function(e) {\n                        var tagName = (e.target.tagName).toLowerCase();\n                        if (enchant.ENV.USE_DEFAULT_EVENT_TAGS.indexOf(tagName) === -1) {\n                            e.preventDefault();\n                            if (!core.running) {\n                                e.stopPropagation();\n                            }\n                        }\n                    }, true);\n                    stage.addEventListener('touchend', function(e) {\n                        var tagName = (e.target.tagName).toLowerCase();\n                        if (enchant.ENV.USE_DEFAULT_EVENT_TAGS.indexOf(tagName) === -1) {\n                            e.preventDefault();\n                            if (!core.running) {\n                                e.stopPropagation();\n                            }\n                        }\n                    }, true);\n                }\n                stage.addEventListener('mousedown', function(e) {\n                    var tagName = (e.target.tagName).toLowerCase();\n                    if (enchant.ENV.USE_DEFAULT_EVENT_TAGS.indexOf(tagName) === -1) {\n                        e.preventDefault();\n                        core._mousedownID++;\n                        if (!core.running) {\n                            e.stopPropagation();\n                        }\n                    }\n                }, true);\n                stage.addEventListener('mousemove', function(e) {\n                    var tagName = (e.target.tagName).toLowerCase();\n                    if (enchant.ENV.USE_DEFAULT_EVENT_TAGS.indexOf(tagName) === -1) {\n                        e.preventDefault();\n                        if (!core.running) {\n                            e.stopPropagation();\n                        }\n                    }\n                }, true);\n                stage.addEventListener('mouseup', function(e) {\n                    var tagName = (e.target.tagName).toLowerCase();\n                    if (enchant.ENV.USE_DEFAULT_EVENT_TAGS.indexOf(tagName) === -1) {\n                        e.preventDefault();\n                        if (!core.running) {\n                            e.stopPropagation();\n                        }\n                    }\n                }, true);\n                core._touchEventTarget = {};\n                if (enchant.ENV.TOUCH_ENABLED) {\n                    stage.addEventListener('touchstart', function(e) {\n                        var core = enchant.Core.instance;\n                        var evt = new enchant.Event(enchant.Event.TOUCH_START);\n                        var touches = e.changedTouches;\n                        var touch, target;\n                        for (var i = 0, l = touches.length; i < l; i++) {\n                            touch = touches[i];\n                            evt._initPosition(touch.pageX, touch.pageY);\n                            target = core.currentScene._determineEventTarget(evt);\n                            core._touchEventTarget[touch.identifier] = target;\n                            target.dispatchEvent(evt);\n                        }\n                    }, false);\n                    stage.addEventListener('touchmove', function(e) {\n                        var core = enchant.Core.instance;\n                        var evt = new enchant.Event(enchant.Event.TOUCH_MOVE);\n                        var touches = e.changedTouches;\n                        var touch, target;\n                        for (var i = 0, l = touches.length; i < l; i++) {\n                            touch = touches[i];\n                            target = core._touchEventTarget[touch.identifier];\n                            if (target) {\n                                evt._initPosition(touch.pageX, touch.pageY);\n                                target.dispatchEvent(evt);\n                            }\n                        }\n                    }, false);\n                    stage.addEventListener('touchend', function(e) {\n                        var core = enchant.Core.instance;\n                        var evt = new enchant.Event(enchant.Event.TOUCH_END);\n                        var touches = e.changedTouches;\n                        var touch, target;\n                        for (var i = 0, l = touches.length; i < l; i++) {\n                            touch = touches[i];\n                            target = core._touchEventTarget[touch.identifier];\n                            if (target) {\n                                evt._initPosition(touch.pageX, touch.pageY);\n                                target.dispatchEvent(evt);\n                                delete core._touchEventTarget[touch.identifier];\n                            }\n                        }\n                    }, false);\n                }\n                stage.addEventListener('mousedown', function(e) {\n                    var core = enchant.Core.instance;\n                    var evt = new enchant.Event(enchant.Event.TOUCH_START);\n                    evt._initPosition(e.pageX, e.pageY);\n                    var target = core.currentScene._determineEventTarget(evt);\n                    core._touchEventTarget[core._mousedownID] = target;\n                    target.dispatchEvent(evt);\n                }, false);\n                stage.addEventListener('mousemove', function(e) {\n                    var core = enchant.Core.instance;\n                    var evt = new enchant.Event(enchant.Event.TOUCH_MOVE);\n                    evt._initPosition(e.pageX, e.pageY);\n                    var target = core._touchEventTarget[core._mousedownID];\n                    if (target) {\n                        target.dispatchEvent(evt);\n                    }\n                }, false);\n                stage.addEventListener('mouseup', function(e) {\n                    var core = enchant.Core.instance;\n                    var evt = new enchant.Event(enchant.Event.TOUCH_END);\n                    evt._initPosition(e.pageX, e.pageY);\n                    var target = core._touchEventTarget[core._mousedownID];\n                    if (target) {\n                        target.dispatchEvent(evt);\n                    }\n                    delete core._touchEventTarget[core._mousedownID];\n                }, false);\n            }\n        },\n        /**\n         * 画面の横幅.\n         * @type {Number}\n         */\n        width: {\n            get: function() {\n                return this._width;\n            },\n            set: function(w) {\n                this._width = w;\n                this._dispatchCoreResizeEvent();\n            }\n        },\n        /**\n         * 画面の高さ.\n         * @type {Number}\n         */\n        height: {\n            get: function() {\n                return this._height;\n            },\n            set: function(h) {\n                this._height = h;\n                this._dispatchCoreResizeEvent();\n            }\n        },\n        /**\n         * 画面の表示倍率.\n         * @type {Number}\n         */\n        scale: {\n            get: function() {\n                return this._scale;\n            },\n            set: function(s) {\n                this._scale = s;\n                this._dispatchCoreResizeEvent();\n            }\n        },\n        _dispatchCoreResizeEvent: function() {\n            var e = new enchant.Event('coreresize');\n            e.width = this._width;\n            e.height = this._height;\n            e.scale = this._scale;\n            this.dispatchEvent(e);\n        },\n        _oncoreresize: function(e) {\n            this._element.style.width = Math.floor(this._width * this._scale) + 'px';\n            this._element.style.height = Math.floor(this._height * this._scale) + 'px';\n            var scene;\n            for (var i = 0, l = this._scenes.length; i < l; i++) {\n                scene = this._scenes[i];\n                scene.dispatchEvent(e);\n            }\n        },\n        /**\n         * ファイルのプリロードを行う.\n         *\n         * プリロードを行うよう設定されたファイルはenchant.Core#startが実行されるとき\n         * ロードが行われる. 全てのファイルのロードが完了したときはCoreオブジェクトからload\n         * イベントが発行され, Coreオブジェクトのassetsプロパティから画像ファイルの場合は\n         * Surfaceオブジェクトとして, 音声ファイルの場合はSoundオブジェクトとして,\n         * その他の場合は文字列としてアクセスできるようになる.\n         *\n         * なおこのSurfaceオブジェクトはenchant.Surface.loadを使って作成されたものである\n         * ため直接画像操作を行うことはできない. enchant.Surface.loadの項を参照.\n         *\n         * @example\n         *   core.preload('player.gif');\n         *   core.onload = function() {\n         *      var sprite = new Sprite(32, 32);\n         *      sprite.image = core.assets['player.gif']; // パス名でアクセス\n         *      ...\n         *   };\n         *   core.start();\n         *\n         * @param {...String} assets プリロードする画像のパス. 複数指定できる.\n         * @return {enchant.Core} this\n         */\n        preload: function(assets) {\n            var a;\n            if (!(assets instanceof Array)) {\n                if (typeof assets === 'object') {\n                    a = [];\n                    for (var name in assets) {\n                        if (assets.hasOwnProperty(name)) {\n                            a.push([ assets[name], name ]);\n                        }\n                    }\n                    assets = a;\n                } else {\n                    assets = Array.prototype.slice.call(arguments);\n                }\n            }\n            Array.prototype.push.apply(this._assets, assets);\n            return this;\n        },\n        /**\n         * ファイルのロードを行う.\n         *\n         * @param {String} asset ロードするファイルのパス.\n         * @param {String} [alias] ロードするファイルに設定したい名前.\n         * @param {Function} [callback] ファイルのロードが完了したときに呼び出される関数.\n         * @param {Function} [onerror] ファイルのロードに失敗したときに呼び出される関数.\n         */\n        load: function(src, alias, callback, onerror) {\n            var assetName, offset;\n            if (typeof arguments[1] === 'string') {\n                assetName = alias;\n                offset = 1;\n            } else {\n                assetName = src;\n                offset = 0;\n            }\n            callback = arguments[1 + offset] || function() {};\n            onerror = arguments[2 + offset] || function() {};\n\n            var ext = enchant.Core.findExt(src);\n\n            return enchant.Deferred.next(function() {\n                var d = new enchant.Deferred();\n                var _callback = function(e) {\n                    d.call(e);\n                    callback.call(this, e);\n                };\n                var _onerror = function(e) {\n                    d.fail(e);\n                    onerror.call(this, e);\n                };\n                if (enchant.Core._loadFuncs[ext]) {\n                    enchant.Core.instance.assets[assetName] = enchant.Core._loadFuncs[ext](src, ext, _callback, _onerror);\n                } else {\n                    var req = new XMLHttpRequest();\n                    req.open('GET', src, true);\n                    req.onreadystatechange = function() {\n                        if (req.readyState === 4) {\n                            if (req.status !== 200 && req.status !== 0) {\n                                // throw new Error(req.status + ': ' + 'Cannot load an asset: ' + src);\n                                var e = new enchant.Event('error');\n                                e.message = req.status + ': ' + 'Cannot load an asset: ' + src;\n                                _onerror.call(enchant.Core.instance, e);\n                            }\n\n                            var type = req.getResponseHeader('Content-Type') || '';\n                            if (type.match(/^image/)) {\n                                core.assets[assetName] = enchant.Surface.load(src, _callback, _onerror);\n                            } else if (type.match(/^audio/)) {\n                                core.assets[assetName] = enchant.Sound.load(src, type, _callback, _onerror);\n                            } else {\n                                core.assets[assetName] = req.responseText;\n                                _callback.call(enchant.Core.instance, new enchant.Event('laod'));\n                            }\n                        }\n                    };\n                    req.send(null);\n                }\n                return d;\n            });\n        },\n        /**\n         * アプリを起動する.\n         *\n         * enchant.Core#fpsで設定されたフレームレートに従ってenchant.Core#currentSceneの\n         * フレームの更新が行われるようになる. プリロードする画像が存在する場合はロードが\n         * 始まりローディング画面が表示される.\n         * @return {enchant.Deferred} Deferred\n         */\n        start: function(deferred) {\n            var onloadTimeSetter = function() {\n                this.frame = 0;\n                this.removeEventListener('load', onloadTimeSetter);\n            };\n            this.addEventListener('load', onloadTimeSetter);\n\n            this.currentTime = window.getTime();\n            this.running = true;\n            this.ready = true;\n\n            if (!this._activated) {\n                this._activated = true;\n                if (enchant.ENV.SOUND_ENABLED_ON_MOBILE_SAFARI && !core._touched &&\n                    (navigator.userAgent.indexOf('iPhone OS') !== -1 ||\n                    navigator.userAgent.indexOf('iPad') !== -1)) {\n                    var d = new enchant.Deferred();\n                    var scene = new enchant.Scene();\n                    scene.backgroundColor = '#000';\n                    var size = Math.round(core.width / 10);\n                    var sprite = new enchant.Sprite(core.width, size);\n                    sprite.y = (core.height - size) / 2;\n                    sprite.image = new enchant.Surface(core.width, size);\n                    sprite.image.context.fillStyle = '#fff';\n                    sprite.image.context.font = (size - 1) + 'px bold Helvetica,Arial,sans-serif';\n                    var width = sprite.image.context.measureText('Touch to Start').width;\n                    sprite.image.context.fillText('Touch to Start', (core.width - width) / 2, size - 1);\n                    scene.addChild(sprite);\n                    document.addEventListener('mousedown', function waitTouch() {\n                        document.removeEventListener('mousedown', waitTouch);\n                        core._touched = true;\n                        core.removeScene(scene);\n                        core.start(d);\n                    }, false);\n                    core.pushScene(scene);\n                    return d;\n                }\n            }\n\n            this._requestNextFrame(0);\n\n            var ret = this._requestPreload()\n                .next(function() {\n                    enchant.Core.instance.loadingScene.dispatchEvent(new enchant.Event(enchant.Event.LOAD));\n                });\n\n            if (deferred) {\n                ret.next(function(arg) {\n                    deferred.call(arg);\n                })\n                .error(function(arg) {\n                    deferred.fail(arg);\n                });\n            }\n\n            return ret;\n        },\n        _requestPreload: function() {\n            var o = {};\n            var loaded = 0,\n                len = 0,\n                loadFunc = function() {\n                    var e = new enchant.Event('progress');\n                    e.loaded = ++loaded;\n                    e.total = len;\n                    core.loadingScene.dispatchEvent(e);\n                };\n            this._assets\n                .reverse()\n                .forEach(function(asset) {\n                    var src, name;\n                    if (asset instanceof Array) {\n                        src = asset[0];\n                        name = asset[1];\n                    } else {\n                        src = name = asset;\n                    }\n                    if (!o[name]) {\n                        o[name] = this.load(src, name, loadFunc);\n                        len++;\n                    }\n                }, this);\n\n            this.pushScene(this.loadingScene);\n            return enchant.Deferred.parallel(o);\n        },\n        /**\n         * アプリをデバッグモードで開始する.\n         *\n         * enchant.Core.instance._debug フラグを true にすることでもデバッグモードをオンにすることができる\n         * @return {enchant.Deferred} Deferred\n         */\n        debug: function() {\n            this._debug = true;\n            return this.start();\n        },\n        actualFps: {\n            get: function() {\n                return this._actualFps || this.fps;\n            }\n        },\n        /**\n         * 次のフレームの実行を要求する.\n         * @param {Number} requestAnimationFrameを呼び出すまでの遅延時間.\n         * @private\n         */\n        _requestNextFrame: function(delay) {\n            if (!this.ready) {\n                return;\n            }\n            if (this.fps >= 60 || delay <= 16) {\n                this._calledTime = window.getTime();\n                window.requestAnimationFrame(this._callTick);\n            } else {\n                setTimeout(function() {\n                    var core = enchant.Core.instance;\n                    core._calledTime = window.getTime();\n                    window.requestAnimationFrame(core._callTick);\n                }, Math.max(0, delay));\n            }\n        },\n        /**\n         * Core#_tickを呼び出す.\n         * @private\n         */\n        _callTick: function(time) {\n            enchant.Core.instance._tick(time);\n        },\n        _tick: function(time) {\n            var e = new enchant.Event('enterframe');\n            var now = window.getTime();\n            var elapsed = e.elapsed = now - this.currentTime;\n\n            this._actualFps = elapsed > 0 ? (1000 / elapsed) : 0;\n\n            var nodes = this.currentScene.childNodes.slice();\n            var push = Array.prototype.push;\n            while (nodes.length) {\n                var node = nodes.pop();\n                node.age++;\n                node.dispatchEvent(e);\n                if (node.childNodes) {\n                    push.apply(nodes, node.childNodes);\n                }\n            }\n\n            this.currentScene.age++;\n            this.currentScene.dispatchEvent(e);\n            this.dispatchEvent(e);\n\n            this.dispatchEvent(new enchant.Event('exitframe'));\n            this.frame++;\n            now = window.getTime();\n            this.currentTime = now;\n            this._requestNextFrame(1000 / this.fps - (now - this._calledTime));\n        },\n        getTime: function() {\n            return window.getTime();\n        },\n        /**\n         * アプリを停止する.\n         *\n         * フレームは更新されず, ユーザの入力も受け付けなくなる.\n         * enchant.Core#startで再開できる.\n         */\n        stop: function() {\n            this.ready = false;\n            this.running = false;\n        },\n        /**\n         * アプリを一時停止する.\n         *\n         * フレームは更新されず, ユーザの入力は受け付ける.\n         * enchant.Core#startで再開できる.\n         */\n        pause: function() {\n            this.ready = false;\n        },\n        /**\n         * アプリを再開する。\n         */\n        resume: function() {\n            if (this.ready) {\n                return;\n            }\n            this.currentTime = window.getTime();\n            this.ready = true;\n            this.running = true;\n            this._requestNextFrame(0);\n        },\n\n        /**\n         * 新しいSceneに移行する.\n         *\n         * Sceneはスタック状に管理されており, 表示順序もスタックに積み上げられた順に従う.\n         * enchant.Core#pushSceneを行うとSceneをスタックの一番上に積むことができる. スタックの\n         * 一番上のSceneに対してはフレームの更新が行われる.\n         *\n         * @param {enchant.Scene} scene 移行する新しいScene.\n         * @return {enchant.Scene} 新しいScene.\n         */\n        pushScene: function(scene) {\n            this._element.appendChild(scene._element);\n            if (this.currentScene) {\n                this.currentScene.dispatchEvent(new enchant.Event('exit'));\n            }\n            this.currentScene = scene;\n            this.currentScene.dispatchEvent(new enchant.Event('enter'));\n            return this._scenes.push(scene);\n        },\n        /**\n         * 現在のSceneを終了させ前のSceneに戻る.\n         *\n         * Sceneはスタック状に管理されており, 表示順序もスタックに積み上げられた順に従う.\n         * enchant.Core#popSceneを行うとスタックの一番上のSceneを取り出すことができる.\n         *\n         * @return {enchant.Scene} 終了させたScene.\n         */\n        popScene: function() {\n            if (this.currentScene === this.rootScene) {\n                return this.currentScene;\n            }\n            this._element.removeChild(this.currentScene._element);\n            this.currentScene.dispatchEvent(new enchant.Event('exit'));\n            this.currentScene = this._scenes[this._scenes.length - 2];\n            this.currentScene.dispatchEvent(new enchant.Event('enter'));\n            return this._scenes.pop();\n        },\n        /**\n         * 現在のSceneを別のSceneにおきかえる.\n         *\n         * enchant.Core#popScene, enchant.Core#pushSceneを同時に行う.\n         *\n         * @param {enchant.Scene} scene おきかえるScene.\n         * @return {enchant.Scene} 新しいScene.\n         */\n        replaceScene: function(scene) {\n            this.popScene();\n            return this.pushScene(scene);\n        },\n        /**\n         * Scene削除する.\n         *\n         * Sceneスタック中からSceneを削除する.\n         *\n         * @param {enchant.Scene} scene 削除するScene.\n         * @return {enchant.Scene} 削除したScene.\n         */\n        removeScene: function(scene) {\n            if (this.currentScene === scene) {\n                return this.popScene();\n            } else {\n                var i = this._scenes.indexOf(scene);\n                if (i !== -1) {\n                    this._scenes.splice(i, 1);\n                    this._element.removeChild(scene._element);\n                    return scene;\n                } else {\n                    return null;\n                }\n            }\n        },\n        /**\n         * キーバインドを設定する.\n         *\n         * @param {Number} key キーバインドを設定するキーコード.\n         * @param {String} button 割り当てるボタン.\n         * @return {enchant.Core} this\n         */\n        keybind: function(key, button) {\n            this._keybind[key] = button;\n            var onxbuttondown = function(e) {\n                var inputEvent;\n                if (!this.input[button]) {\n                    this.input[button] = true;\n                    inputEvent = new enchant.Event((this.pressedKeysNum++) ? 'inputchange' : 'inputstart');\n                    this.dispatchEvent(inputEvent);\n                    this.currentScene.dispatchEvent(inputEvent);\n                }\n                this.currentScene.dispatchEvent(e);\n            };\n            var onxbuttonup = function(e) {\n                var inputEvent;\n                if (this.input[button]) {\n                    this.input[button] = false;\n                    inputEvent = new enchant.Event((--this.pressedKeysNum) ? 'inputchange' : 'inputend');\n                    this.dispatchEvent(inputEvent);\n                    this.currentScene.dispatchEvent(inputEvent);\n                }\n                this.currentScene.dispatchEvent(e);\n            };\n\n            this.addEventListener(button + 'buttondown', onxbuttondown);\n            this.addEventListener(button + 'buttonup', onxbuttonup);\n\n            this._internalButtondownListeners[key] = onxbuttondown;\n            this._internalButtonupListeners[key] = onxbuttonup;\n            return this;\n        },\n        /**\n         * キーバインドを削除する.\n         * @param {Number} key 削除するキーコード.\n         * @return {enchant.Core} this\n         */\n        keyunbind: function(key) {\n            if (!this._keybind[key]) {\n                return this;\n            }\n            var buttondowns = this._internalButtondownListeners;\n            var buttonups = this._internalButtonupListeners;\n\n            this.removeEventListener(key + 'buttondown', buttondowns);\n            this.removeEventListener(key + 'buttonup', buttonups);\n\n            delete buttondowns[key];\n            delete buttonups[key];\n\n            delete this._keybind[key];\n\n            return this;\n        },\n        /**\n         * Core#start が呼ばれてから経過した時間を取得する\n         * @return {Number} 経過した時間 (秒)\n         */\n        getElapsedTime: function() {\n            return this.frame / this.fps;\n        }\n    });\n\n    /**\n     * 拡張子に対応したアセットのロード関数.\n     * ロード関数はファイルのパス, 拡張子, コールバックを引数に取り,\n     * 対応したクラスのインスタンスを返す必要がある.\n     * コールバックはEvent.LOADとEvent.ERRORでハンドルする.\n     * @static\n     * @private\n     * @type {Object.<String, Function>}\n     */\n    enchant.Core._loadFuncs = {};\n    enchant.Core._loadFuncs['jpg'] =\n        enchant.Core._loadFuncs['jpeg'] =\n            enchant.Core._loadFuncs['gif'] =\n                enchant.Core._loadFuncs['png'] =\n                    enchant.Core._loadFuncs['bmp'] = function(src, ext, callback, onerror) {\n                        return enchant.Surface.load(src, callback, onerror);\n                    };\n    enchant.Core._loadFuncs['mp3'] =\n        enchant.Core._loadFuncs['aac'] =\n            enchant.Core._loadFuncs['m4a'] =\n                enchant.Core._loadFuncs['wav'] =\n                    enchant.Core._loadFuncs['ogg'] = function(src, ext, callback, onerror) {\n                        return enchant.Sound.load(src, 'audio/' + ext, callback, onerror);\n                    };\n\n    /**\n     * Get the file extension from a path\n     * @param path\n     * @return {*}\n     */\n    enchant.Core.findExt = function(path) {\n        var matched = path.match(/\\.\\w+$/);\n        if (matched && matched.length > 0) {\n            return matched[0].slice(1).toLowerCase();\n        }\n\n        // for data URI\n        if (path.indexOf('data:') === 0) {\n            return path.split(/[\\/;]/)[1].toLowerCase();\n        }\n        return null;\n    };\n\n    /**\n     * 現在のCoreインスタンス.\n     * @type {enchant.Core}\n     * @static\n     */\n    enchant.Core.instance = null;\n}());\n\n/**\n * enchant.Core is moved to enchant.Core from v0.6\n * @type {*}\n */\nenchant.Game = enchant.Core;\n/**\n * @scope enchant.Node.prototype\n */\nenchant.Node = enchant.Class.create(enchant.EventTarget, {\n    /**\n     * @name enchant.Node\n     * @class\n     * Sceneをルートとした表示オブジェクトツリーに属するオブジェクトの基底クラス.\n     * 直接使用することはない.\n     * @constructs\n     * @extends enchant.EventTarget\n     */\n    initialize: function() {\n        enchant.EventTarget.call(this);\n\n        this._dirty = false;\n\n        this._matrix = [ 1, 0, 0, 1, 0, 0 ];\n\n        this._x = 0;\n        this._y = 0;\n        this._offsetX = 0;\n        this._offsetY = 0;\n\n        /**\n         * Node が画面に表示されてから経過したフレーム数。\n         * {@link enchant.Event.ENTER_FRAME} イベントを受け取る前にインクリメントされる。\n         * (ENTER_FRAME イベントのリスナが初めて実行される時に 1 となる。)\n         * @type {Number}\n         */\n        this.age = 0;\n\n        /**\n         * Nodeの親Node.\n         * @type {enchant.Group}\n         */\n        this.parentNode = null;\n        /**\n         * Nodeが属しているScene.\n         * @type {enchant.Scene}\n         */\n        this.scene = null;\n\n        this.addEventListener('touchstart', function(e) {\n            if (this.parentNode) {\n                this.parentNode.dispatchEvent(e);\n            }\n        });\n        this.addEventListener('touchmove', function(e) {\n            if (this.parentNode) {\n                this.parentNode.dispatchEvent(e);\n            }\n        });\n        this.addEventListener('touchend', function(e) {\n            if (this.parentNode) {\n                this.parentNode.dispatchEvent(e);\n            }\n        });\n\n        /**\n         * Node が生成される際に、tl プロパティに Timeline オブジェクトを追加している\n         */\n        if(enchant.ENV.USE_ANIMATION){\n            var tl = this.tl = new enchant.Timeline(this);\n        }\n    },\n    /**\n     * Nodeを移動する.\n     * @param {Number} x 移動先のx座標.\n     * @param {Number} y 移動先のy座標.\n     */\n    moveTo: function(x, y) {\n        this._x = x;\n        this._y = y;\n        this._dirty = true;\n    },\n    /**\n     * Nodeを移動する.\n     * @param {Number} x 移動するx軸方向の距離.\n     * @param {Number} y 移動するy軸方向の距離.\n     */\n    moveBy: function(x, y) {\n        this._x += x;\n        this._y += y;\n        this._dirty = true;\n    },\n    /**\n     * Nodeのx座標.\n     * @type {Number}\n     */\n    x: {\n        get: function() {\n            return this._x;\n        },\n        set: function(x) {\n            this._x = x;\n            this._dirty = true;\n        }\n    },\n    /**\n     * Nodeのy座標.\n     * @type {Number}\n     */\n    y: {\n        get: function() {\n            return this._y;\n        },\n        set: function(y) {\n            this._y = y;\n            this._dirty = true;\n        }\n    },\n    _updateCoordinate: function() {\n        var node = this;\n        var tree = [ node ];\n        var parent = node.parentNode;\n        var scene = this.scene;\n        while (parent && node._dirty) {\n            tree.unshift(parent);\n            node = node.parentNode;\n            parent = node.parentNode;\n        }\n        var matrix = enchant.Matrix.instance;\n        var stack = matrix.stack;\n        var mat = [];\n        var newmat, ox, oy;\n        stack.push(tree[0]._matrix);\n        for (var i = 1, l = tree.length; i < l; i++) {\n            node = tree[i];\n            newmat = [];\n            matrix.makeTransformMatrix(node, mat);\n            matrix.multiply(stack[stack.length - 1], mat, newmat);\n            node._matrix = newmat;\n            stack.push(newmat);\n            ox = (typeof node._originX === 'number') ? node._originX : node._width / 2 || 0;\n            oy = (typeof node._originY === 'number') ? node._originY : node._height / 2 || 0;\n            var vec = [ ox, oy ];\n            matrix.multiplyVec(newmat, vec, vec);\n            node._offsetX = vec[0] - ox;\n            node._offsetY = vec[1] - oy;\n            node._dirty = false;\n        }\n        matrix.reset();\n    },\n    remove: function() {\n        if (this._listener) {\n            this.clearEventListener();\n        }\n        if (this.parentNode) {\n            this.parentNode.removeChild(this);\n        }\n    }\n});\n\nvar _intersectBetweenClassAndInstance = function(Class, instance) {\n    var ret = [];\n    var c;\n    for (var i = 0, l = Class.collection.length; i < l; i++) {\n        c = Class.collection[i];\n        if (instance._intersectOne(c)) {\n            ret.push(c);\n        }\n    }\n    return ret;\n};\n\nvar _intersectBetweenClassAndClass = function(Class1, Class2) {\n    var ret = [];\n    var c1, c2;\n    for (var i = 0, l = Class1.collection.length; i < l; i++) {\n        c1 = Class1.collection[i];\n        for (var j = 0, ll = Class2.collection.length; j < ll; j++) {\n            c2 = Class2.collection[j];\n            if (c1._intersectOne(c2)) {\n                ret.push([ c1, c2 ]);\n            }\n        }\n    }\n    return ret;\n};\n\nvar _intersectStrictBetweenClassAndInstance = function(Class, instance) {\n    var ret = [];\n    var c;\n    for (var i = 0, l = Class.collection.length; i < l; i++) {\n        c = Class.collection[i];\n        if (instance._intersectStrictOne(c)) {\n            ret.push(c);\n        }\n    }\n    return ret;\n};\n\nvar _intersectStrictBetweenClassAndClass = function(Class1, Class2) {\n    var ret = [];\n    var c1, c2;\n    for (var i = 0, l = Class1.collection.length; i < l; i++) {\n        c1 = Class1.collection[i];\n        for (var j = 0, ll = Class2.collection.length; j < ll; j++) {\n            c2 = Class2.collection[j];\n            if (c1._intersectStrictOne(c2)) {\n                ret.push([ c1, c2 ]);\n            }\n        }\n    }\n    return ret;\n};\n\nvar _staticIntersect = function(other) {\n    if (other instanceof enchant.Entity) {\n        return _intersectBetweenClassAndInstance(this, other);\n    } else if (typeof other === 'function' && other.collection) {\n        return _intersectBetweenClassAndClass(this, other);\n    }\n    return false;\n};\n\nvar _staticIntersectStrict = function(other) {\n    if (other instanceof enchant.Entity) {\n        return _intersectStrictBetweenClassAndInstance(this, other);\n    } else if (typeof other === 'function' && other.collection) {\n        return _intersectStrictBetweenClassAndClass(this, other);\n    }\n    return false;\n};\n\n/**\n * @scope enchant.Entity.prototype\n */\nenchant.Entity = enchant.Class.create(enchant.Node, {\n    /**\n     * @name enchant.Entity\n     * @class\n     * DOM上で表示する実体を持ったクラス. 直接使用することはない.\n     * @constructs\n     * @extends enchant.Node\n     */\n    initialize: function() {\n        var core = enchant.Core.instance;\n        enchant.Node.call(this);\n\n        this._rotation = 0;\n        this._scaleX = 1;\n        this._scaleY = 1;\n\n        this._touchEnabled = true;\n        this._clipping = false;\n\n        this._originX = null;\n        this._originY = null;\n\n        this._width = 0;\n        this._height = 0;\n        this._backgroundColor = null;\n        this._debugColor = '#0000ff';\n        this._opacity = 1;\n        this._visible = true;\n        this._buttonMode = null;\n\n        this._style = {};\n        this.__styleStatus = {};\n\n        /**\n         * Entityを描画する際の合成処理を設定する.\n         * Canvas上に描画する際のみ有効.\n         * CanvasのコンテキストのglobalCompositeOperationにセットされる.\n         */\n        this.compositeOperation = null;\n\n        /**\n         * Entityにボタンの機能を設定する.\n         * Entityに対するタッチ, クリックをleft, right, up, down, a, bいずれかの\n         * ボタン入力として割り当てる.\n         * @type {String}\n         */\n        this.buttonMode = null;\n        /**\n         * Entityが押されているかどうか.\n         * {@link enchant.Entity.buttonMode}が設定されているときだけ機能する.\n         * @type {Boolean}\n         */\n        this.buttonPressed = false;\n        this.addEventListener('touchstart', function() {\n            if (!this.buttonMode) {\n                return;\n            }\n            this.buttonPressed = true;\n            var e = new enchant.Event(this.buttonMode + 'buttondown');\n            this.dispatchEvent(e);\n            core.dispatchEvent(e);\n        });\n        this.addEventListener('touchend', function() {\n            if (!this.buttonMode) {\n                return;\n            }\n            this.buttonPressed = false;\n            var e = new enchant.Event(this.buttonMode + 'buttonup');\n            this.dispatchEvent(e);\n            core.dispatchEvent(e);\n        });\n\n        this.enableCollection();\n    },\n    /**\n     * Entityの横幅.\n     * @type {Number}\n     */\n    width: {\n        get: function() {\n            return this._width;\n        },\n        set: function(width) {\n            this._width = width;\n            this._dirty = true;\n        }\n    },\n    /**\n     * Entityの高さ.\n     * @type {Number}\n     */\n    height: {\n        get: function() {\n            return this._height;\n        },\n        set: function(height) {\n            this._height = height;\n            this._dirty = true;\n        }\n    },\n    /**\n     * Entityの背景色.\n     * CSSの'color'プロパティと同様の形式で指定できる.\n     * @type {String}\n     */\n    backgroundColor: {\n        get: function() {\n            return this._backgroundColor;\n        },\n        set: function(color) {\n            this._backgroundColor = color;\n        }\n    },\n    /**\n     * Entityのデバッグの枠色.\n     * CSSの'color'プロパティと同様の形式で指定できる.\n     * @type {String}\n     */\n    debugColor: {\n        get: function() {\n            return this._debugColor;\n        },\n        set: function(color) {\n            this._debugColor = color;\n        }\n    },\n    /**\n     * Entityの透明度.\n     * 0から1までの値を設定する(0が完全な透明, 1が完全な不透明).\n     * @type {Number}\n     */\n    opacity: {\n        get: function() {\n            return this._opacity;\n        },\n        set: function(opacity) {\n            this._opacity = parseFloat(opacity);\n        }\n    },\n    /**\n     * Entityを表示するかどうかを指定する.\n     * @type {Boolean}\n     */\n    visible: {\n        get: function() {\n            return this._visible;\n        },\n        set: function(visible) {\n            this._visible = visible;\n        }\n    },\n    /**\n     * Entityのタッチを有効にするかどうかを指定する.\n     * @type {Boolean}\n     */\n    touchEnabled: {\n        get: function() {\n            return this._touchEnabled;\n        },\n        set: function(enabled) {\n            this._touchEnabled = enabled;\n            if (enabled) {\n                this._style.pointerEvents = 'all';\n            } else {\n                this._style.pointerEvents = 'none';\n            }\n        }\n    },\n    /**\n     * Entityの矩形が交差しているかどうかにより衝突判定を行う.\n     * @param {*} other 衝突判定を行うEntityなどx, y, width, heightプロパティを持ったObject.\n     * @return {Boolean} 衝突判定の結果.\n     */\n    intersect: function(other) {\n        if (other instanceof enchant.Entity) {\n            return this._intersectOne(other);\n        } else if (typeof other === 'function' && other.collection) {\n            return _intersectBetweenClassAndInstance(other, this);\n        }\n        return false;\n    },\n    _intersectOne: function(other) {\n        if (this._dirty) {\n            this._updateCoordinate();\n        } if (other._dirty) {\n            other._updateCoordinate();\n        }\n        return this._offsetX < other._offsetX + other.width && other._offsetX < this._offsetX + this.width &&\n            this._offsetY < other._offsetY + other.height && other._offsetY < this._offsetY + this.height;\n    },\n    intersectStrict: function(other) {\n        if (other instanceof enchant.Entity) {\n            return this._intersectStrictOne(other);\n        } else if (typeof other === 'function' && other.collection) {\n            return _intersectStrictBetweenClassAndInstance(other, this);\n        }\n        return false;\n    },\n    _intersectStrictOne: function(other) {\n        if (this._dirty) {\n            this._updateCoordinate();\n        } if (other._dirty) {\n            other._updateCoordinate();\n        }\n        var rect1 = this.getOrientedBoundingRect(),\n            rect2 = other.getOrientedBoundingRect(),\n            lt1 = rect1.leftTop, rt1 = rect1.rightTop,\n            lb1 = rect1.leftBottom, rb1 = rect1.rightBottom,\n            lt2 = rect2.leftTop, rt2 = rect2.rightTop,\n            lb2 = rect2.leftBottom, rb2 = rect2.rightBottom,\n            ltx1 = lt1[0], lty1 = lt1[1], rtx1 = rt1[0], rty1 = rt1[1],\n            lbx1 = lb1[0], lby1 = lb1[1], rbx1 = rb1[0], rby1 = rb1[1],\n            ltx2 = lt2[0], lty2 = lt2[1], rtx2 = rt2[0], rty2 = rt2[1],\n            lbx2 = lb2[0], lby2 = lb2[1], rbx2 = rb2[0], rby2 = rb2[1],\n            t1 = [ rtx1 - ltx1, rty1 - lty1 ],\n            r1 = [ rbx1 - rtx1, rby1 - rty1 ],\n            b1 = [ lbx1 - rbx1, lby1 - rby1 ],\n            l1 = [ ltx1 - lbx1, lty1 - lby1 ],\n            t2 = [ rtx2 - ltx2, rty2 - lty2 ],\n            r2 = [ rbx2 - rtx2, rby2 - rty2 ],\n            b2 = [ lbx2 - rbx2, lby2 - rby2 ],\n            l2 = [ ltx2 - lbx2, lty2 - lby2 ],\n            cx1 = (ltx1 + rtx1 + lbx1 + rbx1) >> 2,\n            cy1 = (lty1 + rty1 + lby1 + rby1) >> 2,\n            cx2 = (ltx2 + rtx2 + lbx2 + rbx2) >> 2,\n            cy2 = (lty2 + rty2 + lby2 + rby2) >> 2,\n            i, j, poss1, poss2, dirs1, dirs2, pos1, pos2, dir1, dir2,\n            px1, py1, px2, py2, dx1, dy1, dx2, dy2, vx, vy, c, c1, c2;\n        if (t1[0] * (cy2 - lty1) - t1[1] * (cx2 - ltx1) > 0 &&\n            r1[0] * (cy2 - rty1) - r1[1] * (cx2 - rtx1) > 0 &&\n            b1[0] * (cy2 - rby1) - b1[1] * (cx2 - rbx1) > 0 &&\n            l1[0] * (cy2 - lby1) - l1[1] * (cx2 - lbx1) > 0) {\n            return true;\n        } else if (t2[0] * (cy1 - lty2) - t2[1] * (cx1 - ltx2) > 0 &&\n            r2[0] * (cy1 - rty2) - r2[1] * (cx1 - rtx2) > 0 &&\n            b2[0] * (cy1 - rby2) - b2[1] * (cx1 - rbx2) > 0 &&\n            l2[0] * (cy1 - lby2) - l2[1] * (cx1 - lbx2) > 0) {\n            return true;\n        } else {\n            poss1 = [ lt1, rt1, rb1, lb1 ];\n            poss2 = [ lt2, rt2, rb2, lb2 ];\n            dirs1 = [ t1, r1, b1, l1 ];\n            dirs2 = [ t2, r2, b2, l2 ];\n            for (i = 0; i < 4; i++) {\n                pos1 = poss1[i];\n                px1 = pos1[0]; py1 = pos1[1];\n                dir1 = dirs1[i];\n                dx1 = dir1[0]; dy1 = dir1[1];\n                for (j = 0; j < 4; j++) {\n                    pos2 = poss2[j];\n                    px2 = pos2[0]; py2 = pos2[1];\n                    dir2 = dirs2[j];\n                    dx2 = dir2[0]; dy2 = dir2[1];\n                    c = dx1 * dy2 - dy1 * dx2;\n                    if (c !== 0) {\n                        vx = px2 - px1;\n                        vy = py2 - py1;\n                        c1 = (vx * dy1 - vy * dx1) / c;\n                        c2 = (vx * dy2 - vy * dx2) / c;\n                        if (0 < c1 && c1 < 1 && 0 < c2 && c2 < 1) {\n                            return true;\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n    },\n    /**\n     * Entityの中心点どうしの距離により衝突判定を行う.\n     * @param {*} other 衝突判定を行うEntityなどx, y, width, heightプロパティを持ったObject.\n     * @param {Number} [distance] 衝突したと見なす最大の距離. デフォルト値は二つのEntityの横幅と高さの平均.\n     * @return {Boolean} 衝突判定の結果.\n     */\n    within: function(other, distance) {\n        if (this._dirty) {\n            this._updateCoordinate();\n        } if (other._dirty) {\n            other._updateCoordinate();\n        }\n        if (distance == null) {\n            distance = (this.width + this.height + other.width + other.height) / 4;\n        }\n        var _;\n        return (_ = this._offsetX - other._offsetX + (this.width - other.width) / 2) * _ +\n            (_ = this._offsetY - other._offsetY + (this.height - other.height) / 2) * _ < distance * distance;\n    }, /**\n     * Spriteを拡大縮小する.\n     * @param {Number} x 拡大するx軸方向の倍率.\n     * @param {Number} [y] 拡大するy軸方向の倍率.\n     */\n    scale: function(x, y) {\n        this._scaleX *= x;\n        this._scaleY *= (y != null) ? y : x;\n        this._dirty = true;\n    },\n    /**\n     * Spriteを回転する.\n     * @param {Number} deg 回転する角度 (度数法).\n     */\n    rotate: function(deg) {\n        this._rotation += deg;\n        this._dirty = true;\n    },\n    /**\n     * Spriteのx軸方向の倍率.\n     * @type {Number}\n     */\n    scaleX: {\n        get: function() {\n            return this._scaleX;\n        },\n        set: function(scaleX) {\n            this._scaleX = scaleX;\n            this._dirty = true;\n        }\n    },\n    /**\n     * Spriteのy軸方向の倍率.\n     * @type {Number}\n     */\n    scaleY: {\n        get: function() {\n            return this._scaleY;\n        },\n        set: function(scaleY) {\n            this._scaleY = scaleY;\n            this._dirty = true;\n        }\n    },\n    /**\n     * Spriteの回転角 (度数法).\n     * @type {Number}\n     */\n    rotation: {\n        get: function() {\n            return this._rotation;\n        },\n        set: function(rotation) {\n            this._rotation = rotation;\n            this._dirty = true;\n        }\n    },\n    /**\n     * 回転・拡大縮小の基準点のX座標\n     * @type {Number}\n     */\n    originX: {\n        get: function() {\n            return this._originX;\n        },\n        set: function(originX) {\n            this._originX = originX;\n            this._dirty = true;\n        }\n    },\n    /**\n     * 回転・拡大縮小の基準点のY座標\n     * @type {Number}\n     */\n    originY: {\n        get: function() {\n            return this._originY;\n        },\n        set: function(originY) {\n            this._originY = originY;\n            this._dirty = true;\n        }\n    },\n    /**\n     * インスタンスをコレクションの対象にする.\n     * デフォルトで呼び出される.\n     */\n    enableCollection: function() {\n        this.addEventListener('addedtoscene', this._addSelfToCollection);\n        this.addEventListener('removedfromscene', this._removeSelfFromCollection);\n        if (this.scene) {\n            this._addSelfToCollection();\n        }\n    },\n    /**\n     * インスタンスをコレクションの対象から除外する.\n     */\n    disableCollection: function() {\n        this.removeEventListener('addedtoscene', this._addSelfToCollection);\n        this.removeEventListener('removedfromscene', this._removeSelfFromCollection);\n        if (this.scene) {\n            this._removeSelfFromCollection();\n        }\n    },\n    _addSelfToCollection: function() {\n        var Constructor = this.getConstructor();\n        Constructor._collectionTarget.forEach(function(C) {\n            C.collection.push(this);\n        }, this);\n    },\n    _removeSelfFromCollection: function() {\n        var Constructor = this.getConstructor();\n        Constructor._collectionTarget.forEach(function(C) {\n            var i = C.collection.indexOf(this);\n            if (i !== -1) {\n                C.collection.splice(i, 1);\n            }\n        }, this);\n    },\n    getBoundingRect: function() {\n        var w = this.width || 0;\n        var h = this.height || 0;\n        var mat = this._matrix;\n        var m11w = mat[0] * w, m12w = mat[1] * w,\n            m21h = mat[2] * h, m22h = mat[3] * h,\n            mdx = mat[4], mdy = mat[5];\n        var xw = [ mdx, m11w + mdx, m21h + mdx, m11w + m21h + mdx ].sort(function(a, b) { return a - b; });\n        var yh = [ mdy, m12w + mdy, m22h + mdy, m12w + m22h + mdy ].sort(function(a, b) { return a - b; });\n\n        return {\n            left: xw[0],\n            top: yh[0],\n            width: xw[3] - xw[0],\n            height: yh[3] - yh[0]\n        };\n    },\n    getOrientedBoundingRect: function() {\n        var w = this.width || 0;\n        var h = this.height || 0;\n        var mat = this._matrix;\n        var m11w = mat[0] * w, m12w = mat[1] * w,\n            m21h = mat[2] * h, m22h = mat[3] * h,\n            mdx = mat[4], mdy = mat[5];\n\n        return {\n            leftTop: [ mdx, mdy ],\n            rightTop: [ m11w + mdx, m12w + mdy ],\n            leftBottom: [ m21h + mdx, m22h + mdy ],\n            rightBottom: [ m11w + m21h + mdx, m12w + m22h + mdy ]\n        };\n    },\n    getConstructor: function() {\n        return Object.getPrototypeOf(this).constructor;\n    }\n});\n\nvar _collectizeConstructor = function(Constructor) {\n    if (Constructor._collective) {\n        return;\n    }\n    var rel = enchant.Class.getInheritanceTree(Constructor);\n    var i = rel.indexOf(enchant.Entity);\n    if (i !== -1) {\n        Constructor._collectionTarget = rel.splice(0, i + 1);\n    } else {\n        Constructor._collectionTarget = [];\n    }\n    Constructor.intersect = _staticIntersect;\n    Constructor.intersectStrict = _staticIntersectStrict;\n    Constructor.collection = [];\n    Constructor._collective = true;\n};\n\n_collectizeConstructor(enchant.Entity);\n\nenchant.Entity._inherited = function(subclass) {\n    _collectizeConstructor(subclass);\n};\n\n/**\n * @scope enchant.Sprite.prototype\n */\nenchant.Sprite = enchant.Class.create(enchant.Entity, {\n    /**\n     * @name enchant.Sprite\n     * @class\n     * 画像表示機能を持ったクラス. Entity を継承している.\n     *\n     * @param {Number} [width] Spriteの横幅.\n     * @param {Number} [height] Spriteの高さ.\n     * @example\n     *   var bear = new Sprite(32, 32);\n     *   bear.image = core.assets['chara1.gif'];\n     *   \n     * @constructs\n     * @extends enchant.Entity\n     */\n    initialize: function(width, height) {\n        enchant.Entity.call(this);\n\n        this.width = width;\n        this.height = height;\n        this._image = null;\n        this._debugColor = '#ff0000';\n        this._frameLeft = 0;\n        this._frameTop = 0;\n        this._frame = 0;\n        this._frameSequence = [];\n        /**\n         * frame に配列が指定されたときの処理。\n         */\n        this.addEventListener('enterframe', function() {\n            if (this._frameSequence.length !== 0) {\n                var nextFrame = this._frameSequence.shift();\n                if (nextFrame === null) {\n                    this._frameSequence = [];\n                } else {\n                    this._setFrame(nextFrame);\n                    this._frameSequence.push(nextFrame);\n                }\n            }\n        });\n    },\n    /**\n     * Spriteで表示する画像.\n     * @type {enchant.Surface}\n     */\n    image: {\n        get: function() {\n            return this._image;\n        },\n        set: function(image) {\n            if (image === undefined) {\n                throw new Error('Assigned value on Sprite.image is undefined. Please double-check image path, and check if the image you want to use is preload before use.');\n            }\n            if (image === this._image) {\n                return;\n            }\n            this._image = image;\n            this._setFrame(this._frame);\n        }\n    },\n    /**\n     * 表示するフレームのインデックス.\n     * Spriteと同じ横幅と高さを持ったフレームが{@link enchant.Sprite#image}プロパティの画像に左上から順に\n     * 配列されていると見て, 0から始まるインデックスを指定することでフレームを切り替える.\n     *\n     * 数値の配列が指定された場合、それらを毎フレーム順に切り替える。\n     * ループするが、null値が含まれているとそこでループをストップする。\n     * @example\n     * var sprite = new Sprite(32, 32);\n     * sprite.frame = [0, 1, 0, 2]\n     * //-> 0, 1, 0, 2, 0, 1, 0, 2,..\n     * sprite.frame = [0, 1, 0, 2, null]\n     * //-> 0, 1, 0, 2, (2, 2,.. :stop)\n     *\n     * @type {Number|Array}\n     */\n    frame: {\n        get: function() {\n            return this._frame;\n        },\n        set: function(frame) {\n            if(this._frame === frame) {\n                return;\n            }\n            if (frame instanceof Array) {\n                var frameSequence = frame;\n                var nextFrame = frameSequence.shift();\n                this._setFrame(nextFrame);\n                frameSequence.push(nextFrame);\n                this._frameSequence = frameSequence;\n            } else {\n                this._setFrame(frame);\n                this._frameSequence = [];\n                this._frame = frame;\n            }\n        }\n    },\n    /**\n     * 0 <= frame\n     * 0以下の動作は未定義.\n     * @param frame\n     * @private\n     */\n    _setFrame: function(frame) {\n        var image = this._image;\n        var row, col;\n        if (image != null) {\n            this._frame = frame;\n            row = image.width / this._width | 0;\n            this._frameLeft = (frame % row | 0) * this._width;\n            this._frameTop = (frame / row | 0) * this._height % image.height;\n        }\n    },\n    /**\n     * width of Sprite\n     * @type {Number}\n     */\n    width: {\n        get: function() {\n            return this._width;\n        },\n        set: function(width) {\n            this._width = width;\n            this._setFrame(this._frame);\n            this._dirty = true;\n        }\n    },\n    /**\n     * height of Sprite\n     * @type {Number}\n     */\n    height: {\n        get: function() {\n            return this._height;\n        },\n        set: function(height) {\n            this._height = height;\n            this._setFrame(this._frame);\n            this._dirty = true;\n        }\n    },\n    cvsRender: function(ctx) {\n        var image = this._image,\n            w = this._width, h = this._height,\n            iw, ih, elem, sx, sy, sw, sh;\n        if (image && w !== 0 && h !== 0) {\n            iw = image.width, ih = image.height;\n            if (iw < w || ih < h) {\n                ctx.fillStyle = enchant.Surface._getPattern(image);\n                ctx.fillRect(0, 0, w, h);\n            } else {\n                elem = image._element;\n                sx = this._frameLeft;\n                sy = Math.min(this._frameTop, ih - h);\n                sw = Math.min(iw - sx, w);\n                sh = Math.min(ih - sy, h);\n                ctx.drawImage(elem, sx, sy, sw, sh, 0, 0, w, h);\n            }\n        }\n    },\n    domRender: (function() {\n        if (enchant.ENV.VENDOR_PREFIX === 'ms') {\n            return function(element) {\n                if (this._image) {\n                    if (this._image._css) {\n                        this._style['background-image'] = this._image._css;\n                        this._style['background-position'] =\n                            -this._frameLeft + 'px ' +\n                            -this._frameTop + 'px';\n                    } else if (this._image._element) {\n                    }\n                }\n            };\n        } else {\n            return function(element) {\n                if (this._image) {\n                    if (this._image._css) {\n                        this._style['background-image'] = this._image._css;\n                        this._style['background-position'] =\n                            -this._frameLeft + 'px ' +\n                            -this._frameTop + 'px';\n                    } else if (this._image._element) {\n                    }\n                }\n            };\n        }\n    }())\n});\n\n/**\n * @scope enchant.Label.prototype\n */\nenchant.Label = enchant.Class.create(enchant.Entity, {\n    /**\n     * @name enchant.Label\n     * @class\n     * Label クラス。\n     * @constructs\n     * @extends enchant.Entity\n     */\n    initialize: function(text) {\n        enchant.Entity.call(this);\n\n        this.text = text || '';\n        this.width = 300;\n        this.font = '14px serif';\n        this.textAlign = 'left';\n\n        this._debugColor = '#ff0000';\n    },\n    width: {\n        get: function() {\n            return this._width;\n        },\n        set: function(width) {\n            this._width = width;\n            this._dirty = true;\n            // issue #164\n            this.updateBoundArea();\n        }\n    },\n    /**\n     * 表示するテキスト.\n     * DOM レンダラを利用している場合 (DOMScene 以下にある場合) 改行タグ (br) も利用できるが、\n     * ユーザから入力したり、サーバから取得した文字列を表示する場合, XSS 脆弱性などに注意してください.\n     * Canvas レンダラを利用できる場合でも、改行タグ (br, BR) は改行に変換されます。\n     * @type {String}\n     */\n    text: {\n        get: function() {\n            return this._text;\n        },\n        set: function(text) {\n            text = '' + text;\n            if(this._text === text) {\n                return;\n            }\n            this._text = text;\n            text = text.replace(/<(br|BR) ?\\/?>/g, '<br/>');\n            this._splitText = text.split('<br/>');\n            this.updateBoundArea();\n            for (var i = 0, l = this._splitText.length; i < l; i++) {\n                text = this._splitText[i];\n                var metrics = this.getMetrics(text);\n                this._splitText[i] = {};\n                this._splitText[i].text = text;\n                this._splitText[i].height = metrics.height;\n            }\n        }\n    },\n    /**\n     * テキストの水平位置の指定.\n     * CSSの'text-align'プロパティと同様の形式で指定できる.\n     * @type {String}\n     */\n    textAlign: {\n        get: function() {\n            return this._style['text-align'];\n        },\n        set: function(textAlign) {\n            this._style['text-align'] = textAlign;\n            this.updateBoundArea();\n        }\n    },\n    /**\n     * フォントの指定.\n     * CSSの'font'プロパティと同様の形式で指定できる.\n     * @type {String}\n     */\n    font: {\n        get: function() {\n            return this._style.font;\n        },\n        set: function(font) {\n            this._style.font = font;\n            this.updateBoundArea();\n        }\n    },\n    /**\n     * 文字色の指定.\n     * CSSの'color'プロパティと同様の形式で指定できる.\n     * @type {String}\n     */\n    color: {\n        get: function() {\n            return this._style.color;\n        },\n        set: function(color) {\n            this._style.color = color;\n        }\n    },\n    cvsRender: function(ctx) {\n        var x, y = 0;\n        var labelWidth = this.width;\n        var charWidth, amount, line, text, c, buf, increase, length;\n        var bufWidth;\n        if (this._splitText) {\n            ctx.textBaseline = 'top';\n            ctx.font = this.font;\n            ctx.fillStyle = this.color || '#000000';\n            charWidth = ctx.measureText(' ').width;\n            amount = labelWidth / charWidth;\n            for (var i = 0, l = this._splitText.length; i < l; i++) {\n                line = this._splitText[i];\n                text = line.text;\n                c = 0;\n                while (text.length > c + amount || ctx.measureText(text.slice(c, c + amount)).width > labelWidth) {\n                    buf = '';\n                    increase = amount;\n                    length = 0;\n                    while (increase > 0) {\n                        if (ctx.measureText(buf).width < labelWidth) {\n                            length += increase;\n                            buf = text.slice(c, c + length);\n                        } else {\n                            length -= increase;\n                            buf = text.slice(c, c + length);\n                        }\n                        increase = increase / 2 | 0;\n                    }\n                    ctx.fillText(buf, 0, y);\n                    y += line.height - 1;\n                    c += length;\n                }\n                buf = text.slice(c, c + text.length);\n                if (this.textAlign === 'right') {\n                    x = labelWidth - ctx.measureText(buf).width;\n                } else if (this.textAlign === 'center') {\n                    x = (labelWidth - ctx.measureText(buf).width) / 2;\n                } else {\n                    x = 0;\n                }\n                ctx.fillText(buf, x, y);\n                y += line.height - 1;\n            }\n        }\n    },\n    domRender: function(element) {\n        if (element.innerHTML !== this._text) {\n            element.innerHTML = this._text;\n        }\n    },\n    detectRender: function(ctx) {\n        ctx.fillRect(this._boundOffset, 0, this._boundWidth, this._boundHeight);\n    },\n    updateBoundArea: function() {\n        var metrics = this.getMetrics();\n        this._boundWidth = metrics.width;\n        this._boundHeight = metrics.height;\n        if (this.textAlign === 'right') {\n            this._boundOffset = this.width - this._boundWidth;\n        } else if (this.textAlign === 'center') {\n            this._boundOffset = (this.width - this._boundWidth) / 2;\n        } else {\n            this._boundOffset = 0;\n        }\n    },\n    getMetrics: function(text) {\n        var ret = {};\n        var div, width, height;\n        if (document.body) {\n            div = document.createElement('div');\n            for (var prop in this._style) {\n                if(prop !== 'width' && prop !== 'height') {\n                    div.style[prop] = this._style[prop];\n                }\n            }\n            text = text || this._text;\n            div.innerHTML = text.replace(/ /g, '&nbsp;');\n            div.style.whiteSpace = 'noWrap';\n            div.style.lineHeight = 1;\n            document.body.appendChild(div);\n            ret.height = parseInt(getComputedStyle(div).height, 10) + 1;\n            div.style.position = 'absolute';\n            ret.width = parseInt(getComputedStyle(div).width, 10) + 1;\n            document.body.removeChild(div);\n        } else {\n            ret.width = this.width;\n            ret.height = this.height;\n        }\n        return ret;\n    }\n});\n\n/**\n * @scope enchant.Map.prototype\n */\nenchant.Map = enchant.Class.create(enchant.Entity, {\n    /**\n     * @name enchant.Map\n     * @class\n     * タイルセットからマップを生成して表示するクラス.\n     *\n     * @param {Number} tileWidth タイルの横幅.\n     * @param {Number} tileHeight タイルの高さ.\n     * @constructs\n     * @extends enchant.Entity\n     */\n    initialize: function(tileWidth, tileHeight) {\n        var core = enchant.Core.instance;\n\n        enchant.Entity.call(this);\n\n        var surface = new enchant.Surface(core.width, core.height);\n        this._surface = surface;\n        var canvas = surface._element;\n        canvas.style.position = 'absolute';\n        if (enchant.ENV.RETINA_DISPLAY && core.scale === 2) {\n            canvas.width = core.width * 2;\n            canvas.height = core.height * 2;\n            this._style.webkitTransformOrigin = '0 0';\n            this._style.webkitTransform = 'scale(0.5)';\n        } else {\n            canvas.width = core.width;\n            canvas.height = core.height;\n        }\n        this._context = canvas.getContext('2d');\n\n        this._tileWidth = tileWidth || 0;\n        this._tileHeight = tileHeight || 0;\n        this._image = null;\n        this._data = [\n            [\n                []\n            ]\n        ];\n        this._dirty = false;\n        this._tight = false;\n\n        this.touchEnabled = false;\n\n        /**\n         * タイルが衝突判定を持つかを表す値の二元配列.\n         * @type {Array.<Array.<Number>>}\n         */\n        this.collisionData = null;\n\n        this._listeners['render'] = null;\n        this.addEventListener('render', function() {\n            if (this._dirty || this._previousOffsetX == null) {\n                this.redraw(0, 0, core.width, core.height);\n            } else if (this._offsetX !== this._previousOffsetX ||\n                this._offsetY !== this._previousOffsetY) {\n                if (this._tight) {\n                    var x = -this._offsetX;\n                    var y = -this._offsetY;\n                    var px = -this._previousOffsetX;\n                    var py = -this._previousOffsetY;\n                    var w1 = x - px + core.width;\n                    var w2 = px - x + core.width;\n                    var h1 = y - py + core.height;\n                    var h2 = py - y + core.height;\n                    if (w1 > this._tileWidth && w2 > this._tileWidth &&\n                        h1 > this._tileHeight && h2 > this._tileHeight) {\n                        var sx, sy, dx, dy, sw, sh;\n                        if (w1 < w2) {\n                            sx = 0;\n                            dx = px - x;\n                            sw = w1;\n                        } else {\n                            sx = x - px;\n                            dx = 0;\n                            sw = w2;\n                        }\n                        if (h1 < h2) {\n                            sy = 0;\n                            dy = py - y;\n                            sh = h1;\n                        } else {\n                            sy = y - py;\n                            dy = 0;\n                            sh = h2;\n                        }\n\n                        if (core._buffer == null) {\n                            core._buffer = document.createElement('canvas');\n                            core._buffer.width = this._context.canvas.width;\n                            core._buffer.height = this._context.canvas.height;\n                        }\n                        var context = core._buffer.getContext('2d');\n                        if (this._doubledImage) {\n                            context.clearRect(0, 0, sw * 2, sh * 2);\n                            context.drawImage(this._context.canvas,\n                                sx * 2, sy * 2, sw * 2, sh * 2, 0, 0, sw * 2, sh * 2);\n                            context = this._context;\n                            context.clearRect(dx * 2, dy * 2, sw * 2, sh * 2);\n                            context.drawImage(core._buffer,\n                                0, 0, sw * 2, sh * 2, dx * 2, dy * 2, sw * 2, sh * 2);\n                        } else {\n                            context.clearRect(0, 0, sw, sh);\n                            context.drawImage(this._context.canvas,\n                                sx, sy, sw, sh, 0, 0, sw, sh);\n                            context = this._context;\n                            context.clearRect(dx, dy, sw, sh);\n                            context.drawImage(core._buffer,\n                                0, 0, sw, sh, dx, dy, sw, sh);\n                        }\n\n                        if (dx === 0) {\n                            this.redraw(sw, 0, core.width - sw, core.height);\n                        } else {\n                            this.redraw(0, 0, core.width - sw, core.height);\n                        }\n                        if (dy === 0) {\n                            this.redraw(0, sh, core.width, core.height - sh);\n                        } else {\n                            this.redraw(0, 0, core.width, core.height - sh);\n                        }\n                    } else {\n                        this.redraw(0, 0, core.width, core.height);\n                    }\n                } else {\n                    this.redraw(0, 0, core.width, core.height);\n                }\n            }\n            this._previousOffsetX = this._offsetX;\n            this._previousOffsetY = this._offsetY;\n        });\n    },\n    /**\n     * データを設定する.\n     * タイルががimageプロパティの画像に左上から順に配列されていると見て, 0から始まる\n     * インデックスの二元配列を設定する.複数指定された場合は後のものから順に表示される.\n     * @param {...Array<Array.<Number>>} data タイルのインデックスの二元配列. 複数指定できる.\n     */\n    loadData: function(data) {\n        this._data = Array.prototype.slice.apply(arguments);\n        this._dirty = true;\n\n        this._tight = false;\n        for (var i = 0, len = this._data.length; i < len; i++) {\n            var c = 0;\n            data = this._data[i];\n            for (var y = 0, l = data.length; y < l; y++) {\n                for (var x = 0, ll = data[y].length; x < ll; x++) {\n                    if (data[y][x] >= 0) {\n                        c++;\n                    }\n                }\n            }\n            if (c / (data.length * data[0].length) > 0.2) {\n                this._tight = true;\n                break;\n            }\n        }\n    },\n    /**\n     * ある座標のタイルが何か調べる.\n     * @param {Number} x マップ上の点のx座標.\n     * @param {Number} y マップ上の点のy座標.\n     * @return {*} ある座標のタイルのデータ.\n     */\n    checkTile: function(x, y) {\n        if (x < 0 || this.width <= x || y < 0 || this.height <= y) {\n            return false;\n        }\n        var width = this._image.width;\n        var height = this._image.height;\n        var tileWidth = this._tileWidth || width;\n        var tileHeight = this._tileHeight || height;\n        x = x / tileWidth | 0;\n        y = y / tileHeight | 0;\n        //\t\treturn this._data[y][x];\n        var data = this._data[0];\n        return data[y][x];\n    },\n    /**\n     * Map上に障害物があるかどうかを判定する.\n     * @param {Number} x 判定を行うマップ上の点のx座標.\n     * @param {Number} y 判定を行うマップ上の点のy座標.\n     * @return {Boolean} 障害物があるかどうか.\n     */\n    hitTest: function(x, y) {\n        if (x < 0 || this.width <= x || y < 0 || this.height <= y) {\n            return false;\n        }\n        var width = this._image.width;\n        var height = this._image.height;\n        var tileWidth = this._tileWidth || width;\n        var tileHeight = this._tileHeight || height;\n        x = x / tileWidth | 0;\n        y = y / tileHeight | 0;\n        if (this.collisionData != null) {\n            return this.collisionData[y] && !!this.collisionData[y][x];\n        } else {\n            for (var i = 0, len = this._data.length; i < len; i++) {\n                var data = this._data[i];\n                var n;\n                if (data[y] != null && (n = data[y][x]) != null &&\n                    0 <= n && n < (width / tileWidth | 0) * (height / tileHeight | 0)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    },\n    /**\n     * Mapで表示するタイルセット画像.\n     * @type {enchant.Surface}\n     */\n    image: {\n        get: function() {\n            return this._image;\n        },\n        set: function(image) {\n            var core = enchant.Core.instance;\n\n            this._image = image;\n            if (enchant.ENV.RETINA_DISPLAY && core.scale === 2) {\n                var img = new enchant.Surface(image.width * 2, image.height * 2);\n                var tileWidth = this._tileWidth || image.width;\n                var tileHeight = this._tileHeight || image.height;\n                var row = image.width / tileWidth | 0;\n                var col = image.height / tileHeight | 0;\n                for (var y = 0; y < col; y++) {\n                    for (var x = 0; x < row; x++) {\n                        img.draw(image, x * tileWidth, y * tileHeight, tileWidth, tileHeight,\n                            x * tileWidth * 2, y * tileHeight * 2, tileWidth * 2, tileHeight * 2);\n                    }\n                }\n                this._doubledImage = img;\n            }\n            this._dirty = true;\n        }\n    },\n    /**\n     * Mapのタイルの横幅.\n     * @type {Number}\n     */\n    tileWidth: {\n        get: function() {\n            return this._tileWidth;\n        },\n        set: function(tileWidth) {\n            this._tileWidth = tileWidth;\n            this._dirty = true;\n        }\n    },\n    /**\n     * Mapのタイルの高さ.\n     * @type {Number}\n     */\n    tileHeight: {\n        get: function() {\n            return this._tileHeight;\n        },\n        set: function(tileHeight) {\n            this._tileHeight = tileHeight;\n            this._dirty = true;\n        }\n    },\n    /**\n     * @private\n     */\n    width: {\n        get: function() {\n            return this._tileWidth * this._data[0][0].length;\n        }\n    },\n    /**\n     * @private\n     */\n    height: {\n        get: function() {\n            return this._tileHeight * this._data[0].length;\n        }\n    },\n    /**\n     * @private\n     */\n    redraw: function(x, y, width, height) {\n        if (this._image == null) {\n            return;\n        }\n\n        var image, tileWidth, tileHeight, dx, dy;\n        if (this._doubledImage) {\n            image = this._doubledImage;\n            tileWidth = this._tileWidth * 2;\n            tileHeight = this._tileHeight * 2;\n            dx = -this._offsetX * 2;\n            dy = -this._offsetY * 2;\n            x *= 2;\n            y *= 2;\n            width *= 2;\n            height *= 2;\n        } else {\n            image = this._image;\n            tileWidth = this._tileWidth;\n            tileHeight = this._tileHeight;\n            dx = -this._offsetX;\n            dy = -this._offsetY;\n        }\n        var row = image.width / tileWidth | 0;\n        var col = image.height / tileHeight | 0;\n        var left = Math.max((x + dx) / tileWidth | 0, 0);\n        var top = Math.max((y + dy) / tileHeight | 0, 0);\n        var right = Math.ceil((x + dx + width) / tileWidth);\n        var bottom = Math.ceil((y + dy + height) / tileHeight);\n\n        var source = image._element;\n        var context = this._context;\n        var canvas = context.canvas;\n        context.clearRect(x, y, width, height);\n        for (var i = 0, len = this._data.length; i < len; i++) {\n            var data = this._data[i];\n            var r = Math.min(right, data[0].length);\n            var b = Math.min(bottom, data.length);\n            for (y = top; y < b; y++) {\n                for (x = left; x < r; x++) {\n                    var n = data[y][x];\n                    if (0 <= n && n < row * col) {\n                        var sx = (n % row) * tileWidth;\n                        var sy = (n / row | 0) * tileHeight;\n                        context.drawImage(source, sx, sy, tileWidth, tileHeight,\n                            x * tileWidth - dx, y * tileHeight - dy, tileWidth, tileHeight);\n                    }\n                }\n            }\n        }\n    },\n    cvsRender: function(ctx) {\n        var core = enchant.Core.instance;\n        if (this.width !== 0 && this.height !== 0) {\n            ctx.save();\n            ctx.setTransform(1, 0, 0, 1, 0, 0);\n            var cvs = this._context.canvas;\n                ctx.drawImage(cvs, 0, 0, core.width, core.height);\n            ctx.restore();\n        }\n    },\n    domRender: function(element) {\n        if (this._image) {\n            this._style['background-image'] = this._surface._css;\n            // bad performance\n            this._style[enchant.ENV.VENDOR_PREFIX + 'Transform'] = 'matrix(1, 0, 0, 1, 0, 0)';\n        }\n    }\n});\n\n\n/**\n * @scope enchant.Group.prototype\n */\nenchant.Group = enchant.Class.create(enchant.Node, {\n    /**\n     * @name enchant.Group\n     * @class\n     * 複数の{@link enchant.Node}を子に持つことができるクラス.\n     *\n     * @example\n     *   var stage = new Group();\n     *   stage.addChild(player);\n     *   stage.addChild(enemy);\n     *   stage.addChild(map);\n     *   stage.addEventListener('enterframe', function() {\n     *      // playerの座標に従って全体をスクロールする\n     *      if (this.x > 64 - player.x) {\n     *          this.x = 64 - player.x;\n     *      }\n     *   });\n     *\n     * @extends enchant.Node\n     * @constructs\n     * @extends enchant.Node\n     */\n    initialize: function() {\n        /**\n         * 子のNode.\n         * @type {Array.<enchant.Node>}\n         */\n        this.childNodes = [];\n\n        enchant.Node.call(this);\n\n        this._rotation = 0;\n        this._scaleX = 1;\n        this._scaleY = 1;\n\n        this._originX = null;\n        this._originY = null;\n\n        this.__dirty = false;\n\n        [enchant.Event.ADDED_TO_SCENE, enchant.Event.REMOVED_FROM_SCENE]\n            .forEach(function(event) {\n                this.addEventListener(event, function(e) {\n                    this.childNodes.forEach(function(child) {\n                        child.scene = this.scene;\n                        child.dispatchEvent(e);\n                    }, this);\n                });\n            }, this);\n    },\n    /**\n     * GroupにNodeを追加する.\n     * @param {enchant.Node} node 追加するNode.\n     */\n    addChild: function(node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild(node);\n        }\n        this.childNodes.push(node);\n        node.parentNode = this;\n        var childAdded = new enchant.Event('childadded');\n        childAdded.node = node;\n        childAdded.next = null;\n        this.dispatchEvent(childAdded);\n        node.dispatchEvent(new enchant.Event('added'));\n        if (this.scene) {\n            node.scene = this.scene;\n            var addedToScene = new enchant.Event('addedtoscene');\n            node.dispatchEvent(addedToScene);\n        }\n    },\n    /**\n     * GroupにNodeを挿入する.\n     * @param {enchant.Node} node 挿入するNode.\n     * @param {enchant.Node} reference 挿入位置の前にあるNode.\n     */\n    insertBefore: function(node, reference) {\n        if (node.parentNode) {\n            node.parentNode.removeChild(node);\n        }\n        var i = this.childNodes.indexOf(reference);\n        if (i !== -1) {\n            this.childNodes.splice(i, 0, node);\n            node.parentNode = this;\n            var childAdded = new enchant.Event('childadded');\n            childAdded.node = node;\n            childAdded.next = reference;\n            this.dispatchEvent(childAdded);\n            node.dispatchEvent(new enchant.Event('added'));\n            if (this.scene) {\n                node.scene = this.scene;\n                var addedToScene = new enchant.Event('addedtoscene');\n                node.dispatchEvent(addedToScene);\n            }\n        } else {\n            this.addChild(node);\n        }\n    },\n    /**\n     * GroupからNodeを削除する.\n     * @param {enchant.Node} node 削除するNode.\n     */\n    removeChild: function(node) {\n        var i;\n        if ((i = this.childNodes.indexOf(node)) !== -1) {\n            this.childNodes.splice(i, 1);\n            node.parentNode = null;\n            var childRemoved = new enchant.Event('childremoved');\n            childRemoved.node = node;\n            this.dispatchEvent(childRemoved);\n            node.dispatchEvent(new enchant.Event('removed'));\n            if (this.scene) {\n                node.scene = null;\n                var removedFromScene = new enchant.Event('removedfromscene');\n                node.dispatchEvent(removedFromScene);\n            }\n        }\n    },\n    /**\n     * 最初の子Node.\n     * @type {enchant.Node}\n     */\n    firstChild: {\n        get: function() {\n            return this.childNodes[0];\n        }\n    },\n    /**\n     * 最後の子Node.\n     * @type {enchant.Node}\n     */\n    lastChild: {\n        get: function() {\n            return this.childNodes[this.childNodes.length - 1];\n        }\n    },\n    /**\n    * Groupの回転角 (度数法).\n    * @type {Number}\n    */\n    rotation: {\n        get: function() {\n            return this._rotation;\n        },\n        set: function(rotation) {\n            this._rotation = rotation;\n            this._dirty = true;\n        }\n    },\n    /**\n    * Groupのx軸方向の倍率.\n    * @type {Number}\n    * @see enchant.CanvasGroup.originX\n    * @see enchant.CanvasGroup.originY\n    */\n    scaleX: {\n        get: function() {\n            return this._scaleX;\n        },\n        set: function(scale) {\n            this._scaleX = scale;\n            this._dirty = true;\n        }\n    },\n    /**\n    * Groupのy軸方向の倍率.\n    * @type {Number}\n    * @see enchant.CanvasGroup.originX\n    * @see enchant.CanvasGroup.originY\n    */\n    scaleY: {\n        get: function() {\n            return this._scaleY;\n        },\n        set: function(scale) {\n            this._scaleY = scale;\n            this._dirty = true;\n        }\n    },\n    /**\n    * 回転・拡大縮小の基準点のX座標\n    * @type {Number}\n    */\n    originX: {\n        get: function() {\n            return this._originX;\n        },\n        set: function(originX) {\n            this._originX = originX;\n            this._dirty = true;\n        }\n    },\n    /**\n    * 回転・拡大縮小の基準点のX座標\n    * @type {Number}\n    */\n    originY: {\n        get: function() {\n            return this._originY;\n        },\n        set: function(originY) {\n            this._originY = originY;\n            this._dirty = true;\n        }\n    },\n    _dirty: {\n        get: function() {\n            return this.__dirty;\n        },\n        set: function(dirty) {\n            dirty = !!dirty;\n            this.__dirty = dirty;\n            if (dirty) {\n                for (var i = 0, l = this.childNodes.length; i < l; i++) {\n                    this.childNodes[i]._dirty = true;\n                }\n            }\n        }\n    }\n});\n\nenchant.Matrix = enchant.Class.create({\n    initialize: function() {\n        this.reset();\n    },\n    reset: function() {\n        this.stack = [];\n        this.stack.push([ 1, 0, 0, 1, 0, 0 ]);\n    },\n    makeTransformMatrix: function(node, dest) {\n        var x = node._x;\n        var y = node._y;\n        var width = node.width || 0;\n        var height = node.height || 0;\n        var rotation = node._rotation || 0;\n        var scaleX = (typeof node._scaleX === 'number') ? node._scaleX : 1;\n        var scaleY = (typeof node._scaleY === 'number') ? node._scaleY : 1;\n        var theta = rotation * Math.PI / 180;\n        var tmpcos = Math.cos(theta);\n        var tmpsin = Math.sin(theta);\n        var w = (typeof node._originX === 'number') ? node._originX : width / 2;\n        var h = (typeof node._originY === 'number') ? node._originY : height / 2;\n        var a = scaleX * tmpcos;\n        var b = scaleX * tmpsin;\n        var c = scaleY * tmpsin;\n        var d = scaleY * tmpcos;\n        dest[0] = a;\n        dest[1] = b;\n        dest[2] = -c;\n        dest[3] = d;\n        dest[4] = (-a * w + c * h + x + w);\n        dest[5] = (-b * w - d * h + y + h);\n    },\n    multiply: function(m1, m2, dest) {\n        var a11 = m1[0], a21 = m1[2], adx = m1[4],\n            a12 = m1[1], a22 = m1[3], ady = m1[5];\n        var b11 = m2[0], b21 = m2[2], bdx = m2[4],\n            b12 = m2[1], b22 = m2[3], bdy = m2[5];\n\n        dest[0] = a11 * b11 + a21 * b12;\n        dest[1] = a12 * b11 + a22 * b12;\n        dest[2] = a11 * b21 + a21 * b22;\n        dest[3] = a12 * b21 + a22 * b22;\n        dest[4] = a11 * bdx + a21 * bdy + adx;\n        dest[5] = a12 * bdx + a22 * bdy + ady;\n    },\n    multiplyVec: function(mat, vec, dest) {\n        var x = vec[0], y = vec[1];\n        var m11 = mat[0], m21 = mat[2], mdx = mat[4],\n            m12 = mat[1], m22 = mat[3], mdy = mat[5];\n        dest[0] = m11 * x + m21 * y + mdx;\n        dest[1] = m12 * x + m22 * y + mdy;\n    }\n});\nenchant.Matrix.instance = new enchant.Matrix();\n\nenchant.DetectColorManager = enchant.Class.create({\n    initialize: function(reso, max) {\n        this.reference = [];\n        this.colorResolution = reso || 16;\n        this.max = max || 1;\n        this.capacity = Math.pow(this.colorResolution, 3);\n        for (var i = 1, l = this.capacity; i < l; i++) {\n            this.reference[i] = null;\n        }\n    },\n    attachDetectColor: function(sprite) {\n        var i = this.reference.indexOf(null);\n        if (i === -1) {\n            i = 1;\n        }\n        this.reference[i] = sprite;\n        return this._getColor(i);\n    },\n    detachDetectColor: function(sprite) {\n        var i = this.reference.indexOf(sprite);\n        if (i !== -1) {\n            this.reference[i] = null;\n        }\n    },\n    _getColor: function(n) {\n        var C = this.colorResolution;\n        var d = C / this.max;\n        return [\n            parseInt((n / C / C) % C, 10) / d,\n            parseInt((n / C) % C, 10) / d,\n            parseInt(n % C, 10) / d,\n            1.0\n        ];\n    },\n    _decodeDetectColor: function(color) {\n        var C = this.colorResolution;\n        return ~~(color[0] * C * C * C / 256) +\n            ~~(color[1] * C * C / 256) +\n            ~~(color[2] * C / 256);\n    },\n    getSpriteByColor: function(color) {\n        return this.reference[this._decodeDetectColor(color)];\n    }\n});\n\nenchant.DomManager = enchant.Class.create({\n    initialize: function(node, elementDefinition) {\n        var core = enchant.Core.instance;\n        this.layer = null;\n        this.targetNode = node;\n        if (typeof elementDefinition === 'string') {\n            this.element = document.createElement(elementDefinition);\n        } else if (elementDefinition instanceof HTMLElement) {\n            this.element = elementDefinition;\n        }\n        this.style = this.element.style;\n        this.style.position = 'absolute';\n        this.style[enchant.ENV.VENDOR_PREFIX + 'TransformOrigin'] = '0px 0px';\n        if (core._debug) {\n            this.style.border = '1px solid blue';\n            this.style.margin = '-1px';\n        }\n\n        var manager = this;\n        this._setDomTarget = function() {\n            manager.layer._touchEventTarget = manager.targetNode;\n        };\n        this._attachEvent();\n    },\n    getDomElement: function() {\n        return this.element;\n    },\n    getDomElementAsNext: function() {\n        return this.element;\n    },\n    getNextManager: function(manager) {\n        var i = this.targetNode.parentNode.childNodes.indexOf(manager.targetNode);\n        if (i !== this.targetNode.parentNode.childNodes.length - 1) {\n            return this.targetNode.parentNode.childNodes[i + 1]._domManager;\n        } else {\n            return null;\n        }\n    },\n    addManager: function(childManager, nextManager) {\n        var nextElement;\n        if (nextManager) {\n            nextElement = nextManager.getDomElementAsNext();\n        }\n        var element = childManager.getDomElement();\n        if (element instanceof Array) {\n            element.forEach(function(child) {\n                if (nextElement) {\n                    this.element.insertBefore(child, nextElement);\n                } else {\n                    this.element.appendChild(child);\n                }\n            }, this);\n        } else {\n            if (nextElement) {\n                this.element.insertBefore(element, nextElement);\n            } else {\n                this.element.appendChild(element);\n            }\n        }\n        this.setLayer(this.layer);\n    },\n    removeManager: function(childManager) {\n        if (childManager instanceof enchant.DomlessManager) {\n            childManager._domRef.forEach(function(element) {\n                this.element.removeChild(element);\n            }, this);\n        } else {\n            this.element.removeChild(childManager.element);\n        }\n        this.setLayer(this.layer);\n    },\n    setLayer: function(layer) {\n        this.layer = layer;\n        var node = this.targetNode;\n        var manager;\n        if (node.childNodes) {\n            for (var i = 0, l = node.childNodes.length; i < l; i++) {\n                manager = node.childNodes[i]._domManager;\n                if (manager) {\n                    manager.setLayer(layer);\n                }\n            }\n        }\n    },\n    render: function(inheritMat) {\n        var node = this.targetNode;\n        var matrix = enchant.Matrix.instance;\n        var stack = matrix.stack;\n        var dest = [];\n        matrix.makeTransformMatrix(node, dest);\n        matrix.multiply(stack[stack.length - 1], dest, dest);\n        matrix.multiply(inheritMat, dest, inheritMat);\n        node._matrix = inheritMat;\n        var ox = (typeof node._originX === 'number') ? node._originX : node.width / 2 || 0;\n        var oy = (typeof node._originY === 'number') ? node._originY : node.height / 2 || 0;\n        var vec = [ ox, oy ];\n        matrix.multiplyVec(dest, vec, vec);\n\n        node._offsetX = vec[0] - ox;\n        node._offsetY = vec[1] - oy;\n        if(node.parentNode && !(node.parentNode instanceof enchant.Group)) {\n            node._offsetX += node.parentNode._offsetX;\n            node._offsetY += node.parentNode._offsetY;\n        }\n        if (node._dirty) {\n            this.style[enchant.ENV.VENDOR_PREFIX + 'Transform'] = 'matrix(' +\n                dest[0].toFixed(10) + ',' +\n                dest[1].toFixed(10) + ',' +\n                dest[2].toFixed(10) + ',' +\n                dest[3].toFixed(10) + ',' +\n                dest[4].toFixed(10) + ',' +\n                dest[5].toFixed(10) +\n            ')';\n        }\n        this.domRender();\n    },\n    domRender: function() {\n        var node = this.targetNode;\n        if(!node._style) {\n            node._style = {};\n        }\n        if(!node.__styleStatus) {\n            node.__styleStatus = {};\n        }\n        if (node.width !== null) {\n            node._style.width = node.width + 'px';\n        }\n        if (node.height !== null) {\n            node._style.height = node.height + 'px';\n        }\n        node._style.opacity = node._opacity;\n        node._style['background-color'] = node._backgroundColor;\n        if (typeof node._visible !== 'undefined') {\n            node._style.display = node._visible ? 'block' : 'none';\n        }\n        if (typeof node.domRender === 'function') {\n            node.domRender(this.element);\n        }\n        var value;\n        for (var prop in node._style) {\n            value = node._style[prop];\n            if(node.__styleStatus[prop] !== value && value != null) {\n                this.style.setProperty(prop, '' + value);\n                node.__styleStatus[prop] = value;\n            }\n        }\n    },\n    _attachEvent: function() {\n        if (enchant.ENV.TOUCH_ENABLED) {\n            this.element.addEventListener('touchstart', this._setDomTarget, true);\n        }\n        this.element.addEventListener('mousedown', this._setDomTarget, true);\n    },\n    _detachEvent: function() {\n        if (enchant.ENV.TOUCH_ENABLED) {\n            this.element.removeEventListener('touchstart', this._setDomTarget, true);\n        }\n        this.element.removeEventListener('mousedown', this._setDomTarget, true);\n    },\n    remove: function() {\n        this._detachEvent();\n        this.element = this.style = this.targetNode = null;\n    }\n});\n\nenchant.DomlessManager = enchant.Class.create({\n    initialize: function(node) {\n        this._domRef = [];\n        this.targetNode = node;\n    },\n    _register: function(element, nextElement) {\n        var i = this._domRef.indexOf(nextElement);\n        var childNodes;\n        if (element instanceof Array) {\n            if (i === -1) {\n                Array.prototype.push.apply(this._domRef, element);\n            } else {\n                Array.prototype.splice.apply(this._domRef, [i, 0].concat(element));\n            }\n        } else {\n            if (i === -1) {\n                this._domRef.push(element);\n            } else {\n                this._domRef.splice(i, 0, element);\n            }\n        }\n    },\n    getNextManager: function(manager) {\n        var i = this.targetNode.parentNode.childNodes.indexOf(manager.targetNode);\n        if (i !== this.targetNode.parentNode.childNodes.length - 1) {\n            return this.targetNode.parentNode.childNodes[i + 1]._domManager;\n        } else {\n            return null;\n        }\n    },\n    getDomElement: function() {\n        var ret = [];\n        this.targetNode.childNodes.forEach(function(child) {\n            ret = ret.concat(child._domManager.getDomElement());\n        });\n        return ret;\n    },\n    getDomElementAsNext: function() {\n        if (this._domRef.length) {\n            return this._domRef[0];\n        } else {\n            var nextManager = this.getNextManager(this);\n            if (nextManager) {\n                return nextManager.element;\n            } else {\n                return null;\n            }\n        }\n    },\n    addManager: function(childManager, nextManager) {\n        var parentNode = this.targetNode.parentNode;\n        if (parentNode) {\n            if (nextManager === null) {\n                nextManager = this.getNextManager(this);\n            }\n            if (parentNode instanceof enchant.Scene) {\n                parentNode._layers.Dom._domManager.addManager(childManager, nextManager);\n            } else {\n                parentNode._domManager.addManager(childManager, nextManager);\n            }\n        }\n        var nextElement = nextManager ? nextManager.getDomElementAsNext() : null;\n        this._register(childManager.getDomElement(), nextElement);\n        this.setLayer(this.layer);\n    },\n    removeManager: function(childManager) {\n        var dom;\n        var i = this._domRef.indexOf(childManager.element);\n        if (i !== -1) {\n            dom = this._domRef[i];\n            dom.parentNode.removeChild(dom);\n            this._domRef.splice(i, 1);\n        }\n        this.setLayer(this.layer);\n    },\n    setLayer: function(layer) {\n        this.layer = layer;\n        var node = this.targetNode;\n        var manager;\n        if (node.childNodes) {\n            for (var i = 0, l = node.childNodes.length; i < l; i++) {\n                manager = node.childNodes[i]._domManager;\n                if (manager) {\n                    manager.setLayer(layer);\n                }\n            }\n        }\n    },\n    render: function(inheritMat) {\n        var matrix = enchant.Matrix.instance;\n        var stack = matrix.stack;\n        var node = this.targetNode;\n        var dest = [];\n        matrix.makeTransformMatrix(node, dest);\n        matrix.multiply(stack[stack.length - 1], dest, dest);\n        matrix.multiply(inheritMat, dest, inheritMat);\n        node._matrix = inheritMat;\n        var ox = (typeof node._originX === 'number') ? node._originX : node.width / 2 || 0;\n        var oy = (typeof node._originY === 'number') ? node._originY : node.height / 2 || 0;\n        var vec = [ ox, oy ];\n        matrix.multiplyVec(dest, vec, vec);\n        node._offsetX = vec[0] - ox;\n        node._offsetY = vec[1] - oy;\n        stack.push(dest);\n    },\n    remove: function() {\n        this._domRef = [];\n        this.targetNode = null;\n    }\n});\n\nenchant.DomLayer = enchant.Class.create(enchant.Group, {\n    initialize: function() {\n        var core = enchant.Core.instance;\n        enchant.Group.call(this);\n\n        this._touchEventTarget = null;\n\n        this._element = document.createElement('div');\n        this._element.style.position = 'absolute';\n\n        this._domManager = new enchant.DomManager(this, this._element);\n        this._domManager.layer = this;\n\n        this.width = core.width;\n        this.height = core.height;\n\n        var touch = [\n            enchant.Event.TOUCH_START,\n            enchant.Event.TOUCH_MOVE,\n            enchant.Event.TOUCH_END\n        ];\n\n        touch.forEach(function(type) {\n            this.addEventListener(type, function(e) {\n                if (this._scene) {\n                    this._scene.dispatchEvent(e);\n                }\n            });\n        }, this);\n\n        var __onchildadded = function(e) {\n            var child = e.node;\n            var next = e.next;\n            var self = e.target;\n            var nextManager = next ? next._domManager : null;\n            enchant.DomLayer._attachDomManager(child, __onchildadded, __onchildremoved);\n            self._domManager.addManager(child._domManager, nextManager);\n            var render = new enchant.Event(enchant.Event.RENDER);\n            child._dirty = true;\n            self._domManager.layer._rendering(child, render);\n        };\n\n        var __onchildremoved = function(e) {\n            var child = e.node;\n            var self = e.target;\n            self._domManager.removeManager(child._domManager);\n            enchant.DomLayer._detachDomManager(child, __onchildadded, __onchildremoved);\n        };\n\n        this.addEventListener('childremoved', __onchildremoved);\n        this.addEventListener('childadded', __onchildadded);\n\n    },\n    width: {\n        get: function() {\n            return this._width;\n        },\n        set: function(width) {\n            this._width = width;\n            this._element.style.width = width + 'px';\n        }\n    },\n    height: {\n        get: function() {\n            return this._height;\n        },\n        set: function(height) {\n            this._height = height;\n            this._element.style.height = height + 'px';\n        }\n    },\n    addChild: function(node) {\n        this.childNodes.push(node);\n        node.parentNode = this;\n        var childAdded = new enchant.Event('childadded');\n        childAdded.node = node;\n        childAdded.next = null;\n        this.dispatchEvent(childAdded);\n        node.dispatchEvent(new enchant.Event('added'));\n        if (this.scene) {\n            node.scene = this.scene;\n            var addedToScene = new enchant.Event('addedtoscene');\n            node.dispatchEvent(addedToScene);\n        }\n    },\n    insertBefore: function(node, reference) {\n        var i = this.childNodes.indexOf(reference);\n        if (i !== -1) {\n            this.childNodes.splice(i, 0, node);\n            node.parentNode = this;\n            var childAdded = new enchant.Event('childadded');\n            childAdded.node = node;\n            childAdded.next = reference;\n            this.dispatchEvent(childAdded);\n            node.dispatchEvent(new enchant.Event('added'));\n            if (this.scene) {\n                node.scene = this.scene;\n                var addedToScene = new enchant.Event('addedtoscene');\n                node.dispatchEvent(addedToScene);\n            }\n        } else {\n            this.addChild(node);\n        }\n    },\n    _startRendering: function() {\n        this.addEventListener('exitframe', this._onexitframe);\n        this._onexitframe();\n    },\n    _stopRendering: function() {\n        this.removeEventListener('exitframe', this._onexitframe);\n        this._onexitframe();\n    },\n    _onexitframe: function() {\n        this._rendering(this, new enchant.Event(enchant.Event.RENDER));\n    },\n    _rendering: function(node, e, inheritMat) {\n        var child;\n        if (!inheritMat) {\n            inheritMat = [ 1, 0, 0, 1, 0, 0 ];\n        }\n        node.dispatchEvent(e);\n        node._domManager.render(inheritMat);\n        if (node.childNodes) {\n            for (var i = 0, l = node.childNodes.length; i < l; i++) {\n                child = node.childNodes[i];\n                this._rendering(child, e, inheritMat.slice());\n            }\n        }\n        if (node._domManager instanceof enchant.DomlessManager) {\n            enchant.Matrix.instance.stack.pop();\n        }\n        node._dirty = false;\n    },\n    _determineEventTarget: function() {\n        var target = this._touchEventTarget;\n        this._touchEventTarget = null;\n        return (target === this) ? null : target;\n    }\n});\n\nenchant.DomLayer._attachDomManager = function(node, onchildadded, onchildremoved) {\n    var child;\n    if (!node._domManager) {\n        node.addEventListener('childadded', onchildadded);\n        node.addEventListener('childremoved', onchildremoved);\n        if (node instanceof enchant.Group) {\n            node._domManager = new enchant.DomlessManager(node);\n        } else {\n            if (node._element) {\n                node._domManager = new enchant.DomManager(node, node._element);\n            } else {\n                node._domManager = new enchant.DomManager(node, 'div');\n            }\n        }\n    }\n    if (node.childNodes) {\n        for (var i = 0, l = node.childNodes.length; i < l; i++) {\n            child = node.childNodes[i];\n            enchant.DomLayer._attachDomManager(child, onchildadded, onchildremoved);\n            node._domManager.addManager(child._domManager, null);\n        }\n    }\n};\n\nenchant.DomLayer._detachDomManager = function(node, onchildadded, onchildremoved) {\n    var child;\n    node.removeEventListener('childadded', onchildadded);\n    node.removeEventListener('childremoved', onchildremoved);\n    if (node.childNodes) {\n        for (var i = 0, l = node.childNodes.length; i < l; i++) {\n            child = node.childNodes[i];\n            node._domManager.removeManager(child._domManager, null);\n            enchant.DomLayer._detachDomManager(child, onchildadded, onchildremoved);\n        }\n    }\n    node._domManager.remove();\n    delete node._domManager;\n};\n\n/**\n * @scope enchant.CanvasLayer.prototype\n */\nenchant.CanvasLayer = enchant.Class.create(enchant.Group, {\n    /**\n     * @name enchant.CanvasLayer\n     * @class\n     * Canvas を用いた描画を行うクラス.\n     * 子を Canvas を用いた描画に切り替えるクラス\n     * @constructs\n     */\n    initialize: function() {\n        var core = enchant.Core.instance;\n\n        enchant.Group.call(this);\n\n        this._cvsCache = {\n            matrix: [1, 0, 0, 1, 0, 0],\n            detectColor: '#000000'\n        };\n        this._cvsCache.layer = this;\n\n        this._element = document.createElement('canvas');\n        this._element.style.position = 'absolute';\n        // issue 179\n        this._element.style.left = this._element.style.top = '0px';\n\n        this._detect = document.createElement('canvas');\n        this._detect.style.position = 'absolute';\n        this._lastDetected = 0;\n\n        this.context = this._element.getContext('2d');\n        this._dctx = this._detect.getContext('2d');\n\n        this._colorManager = new enchant.DetectColorManager(16, 256);\n\n        this.width = core.width;\n        this.height = core.height;\n\n        var touch = [\n            enchant.Event.TOUCH_START,\n            enchant.Event.TOUCH_MOVE,\n            enchant.Event.TOUCH_END\n        ];\n\n        touch.forEach(function(type) {\n            this.addEventListener(type, function(e) {\n                if (this._scene) {\n                    this._scene.dispatchEvent(e);\n                }\n            });\n        }, this);\n\n        var __onchildadded = function(e) {\n            var child = e.node;\n            var self = e.target;\n            var layer;\n            if (self instanceof enchant.CanvasLayer) {\n                layer = self._scene._layers.Canvas;\n            } else {\n                layer = self.scene._layers.Canvas;\n            }\n            enchant.CanvasLayer._attachCache(child, layer, __onchildadded, __onchildremoved);\n            var render = new enchant.Event(enchant.Event.RENDER);\n            if (self._dirty) {\n                self._updateCoordinate();\n            }\n            child._dirty = true;\n            enchant.Matrix.instance.stack.push(self._matrix);\n            enchant.CanvasRenderer.instance.render(layer.context, child, render);\n            enchant.Matrix.instance.stack.pop(self._matrix);\n        };\n\n        var __onchildremoved = function(e) {\n            var child = e.node;\n            var self = e.target;\n            var layer;\n            if (self instanceof enchant.CanvasLayer) {\n                layer = self._scene._layers.Canvas;\n            } else {\n                layer = self.scene._layers.Canvas;\n            }\n            enchant.CanvasLayer._detachCache(child, layer, __onchildadded, __onchildremoved);\n        };\n\n        this.addEventListener('childremoved', __onchildremoved);\n        this.addEventListener('childadded', __onchildadded);\n\n    },\n    width: {\n        get: function() {\n            return this._width;\n        },\n        set: function(width) {\n            this._width = width;\n            this._element.width = this._detect.width = width;\n        }\n    },\n    height: {\n        get: function() {\n            return this._height;\n        },\n        set: function(height) {\n            this._height = height;\n            this._element.height = this._detect.height = height;\n        }\n    },\n    addChild: function(node) {\n        this.childNodes.push(node);\n        node.parentNode = this;\n        var childAdded = new enchant.Event('childadded');\n        childAdded.node = node;\n        childAdded.next = null;\n        this.dispatchEvent(childAdded);\n        node.dispatchEvent(new enchant.Event('added'));\n        if (this.scene) {\n            node.scene = this.scene;\n            var addedToScene = new enchant.Event('addedtoscene');\n            node.dispatchEvent(addedToScene);\n        }\n    },\n    insertBefore: function(node, reference) {\n        var i = this.childNodes.indexOf(reference);\n        if (i !== -1) {\n            this.childNodes.splice(i, 0, node);\n            node.parentNode = this;\n            var childAdded = new enchant.Event('childadded');\n            childAdded.node = node;\n            childAdded.next = reference;\n            this.dispatchEvent(childAdded);\n            node.dispatchEvent(new enchant.Event('added'));\n            if (this.scene) {\n                node.scene = this.scene;\n                var addedToScene = new enchant.Event('addedtoscene');\n                node.dispatchEvent(addedToScene);\n            }\n        } else {\n            this.addChild(node);\n        }\n    },\n    /**\n     * レンダリングを開始.\n     * @private\n     */\n    _startRendering: function() {\n        this.addEventListener('exitframe', this._onexitframe);\n        this._onexitframe(new enchant.Event(enchant.Event.RENDER));\n    },\n    /**\n     * レンダリングを停止.\n     * @private\n     */\n    _stopRendering: function() {\n        this.removeEventListener('render', this._onexitframe);\n        this._onexitframe(new enchant.Event(enchant.Event.RENDER));\n    },\n    _onexitframe: function() {\n        var core = enchant.Core.instance;\n        var ctx = this.context;\n        ctx.clearRect(0, 0, core.width, core.height);\n        var render = new enchant.Event(enchant.Event.RENDER);\n        enchant.CanvasRenderer.instance.render(ctx, this, render);\n    },\n    _determineEventTarget: function(e) {\n        return this._getEntityByPosition(e.x, e.y);\n    },\n    _getEntityByPosition: function(x, y) {\n        var core = enchant.Core.instance;\n        var ctx = this._dctx;\n        if (this._lastDetected < core.frame) {\n            ctx.clearRect(0, 0, this.width, this.height);\n            enchant.CanvasRenderer.instance.detectRender(ctx, this);\n            this._lastDetected = core.frame;\n        }\n        var color = ctx.getImageData(x, y, 1, 1).data;\n        return this._colorManager.getSpriteByColor(color);\n    }\n});\n\nenchant.CanvasLayer._attachCache = function(node, layer, onchildadded, onchildremoved) {\n    var child;\n    if (!node._cvsCache) {\n        node._cvsCache = {};\n        node._cvsCache.matrix = [ 1, 0, 0, 1, 0, 0 ];\n        node._cvsCache.detectColor = 'rgba(' + layer._colorManager.attachDetectColor(node) + ')';\n        node.addEventListener('childadded', onchildadded);\n        node.addEventListener('childremoved', onchildremoved);\n    }\n    if (node.childNodes) {\n        for (var i = 0, l = node.childNodes.length; i < l; i++) {\n            child = node.childNodes[i];\n            enchant.CanvasLayer._attachCache(child, layer, onchildadded, onchildremoved);\n        }\n    }\n};\n\nenchant.CanvasLayer._detachCache = function(node, layer, onchildadded, onchildremoved) {\n    var child;\n    if (node._cvsCache) {\n        layer._colorManager.detachDetectColor(node);\n        node.removeEventListener('childadded', onchildadded);\n        node.removeEventListener('childremoved', onchildremoved);\n        delete node._cvsCache;\n    }\n    if (node.childNodes) {\n        for (var i = 0, l = node.childNodes.length; i < l; i++) {\n            child = node.childNodes[i];\n            enchant.CanvasLayer._detachCache(child, layer, onchildadded, onchildremoved);\n        }\n    }\n};\n\nenchant.CanvasRenderer = enchant.Class.create({\n    render: function(ctx, node, e) {\n        var width, height, child;\n        ctx.save();\n        node.dispatchEvent(e);\n        // transform\n        this.transform(ctx, node);\n        if (typeof node._visible === 'undefined' || node._visible) {\n            width = node.width;\n            height = node.height;\n            // composite\n            if (node.compositeOperation) {\n                ctx.globalCompositeOperation = node.compositeOperation;\n            }\n            ctx.globalAlpha = (typeof node._opacity === 'number') ? node._opacity : 1.0;\n            // render\n            if (node._backgroundColor) {\n                ctx.fillStyle = node._backgroundColor;\n                ctx.fillRect(0, 0, width, height);\n            }\n\n            if (node.cvsRender) {\n                node.cvsRender(ctx);\n            }\n\n            if (enchant.Core.instance._debug && node._debugColor) {\n                ctx.strokeStyle = node._debugColor;\n                ctx.strokeRect(0, 0, width, height);\n            }\n            if (node._clipping) {\n                ctx.beginPath();\n                ctx.rect(0, 0, width, height);\n                ctx.clip();\n            }\n            if (node.childNodes) {\n                for (var i = 0, l = node.childNodes.length; i < l; i++) {\n                    child = node.childNodes[i];\n                    this.render(ctx, child, e);\n                }\n            }\n        }\n        ctx.restore();\n        enchant.Matrix.instance.stack.pop();\n    },\n    detectRender: function(ctx, node) {\n        var width, height, child;\n        if (typeof node._visible === 'undefined' || node._visible) {\n            width = node.width;\n            height = node.height;\n            ctx.save();\n            this.transform(ctx, node);\n            ctx.fillStyle = node._cvsCache.detectColor;\n            if (node._touchEnabled) {\n                if (node.detectRender) {\n                    node.detectRender(ctx);\n                } else {\n                    ctx.fillRect(0, 0, width, height);\n                }\n            }\n            if (node._clipping) {\n                ctx.beginPath();\n                ctx.rect(0, 0, width, height);\n                ctx.clip();\n            }\n            if (node.childNodes) {\n                for (var i = 0, l = node.childNodes.length; i < l; i++) {\n                    child = node.childNodes[i];\n                    this.detectRender(ctx, child);\n                }\n            }\n            ctx.restore();\n            enchant.Matrix.instance.stack.pop();\n        }\n    },\n    transform: function(ctx, node) {\n        var matrix = enchant.Matrix.instance;\n        var stack = matrix.stack;\n        var newmat, ox, oy, vec;\n        if (node._dirty) {\n            matrix.makeTransformMatrix(node, node._cvsCache.matrix);\n            newmat = [];\n            matrix.multiply(stack[stack.length - 1], node._cvsCache.matrix, newmat);\n            node._matrix = newmat;\n            ox = (typeof node._originX === 'number') ? node._originX : node._width / 2 || 0;\n            oy = (typeof node._originY === 'number') ? node._originY : node._height / 2 || 0;\n            vec = [ ox, oy ];\n            matrix.multiplyVec(newmat, vec, vec);\n            node._offsetX = vec[0] - ox;\n            node._offsetY = vec[1] - oy;\n            node._dirty = false;\n        } else {\n            newmat = node._matrix;\n        }\n        stack.push(newmat);\n        ctx.setTransform.apply(ctx, newmat);\n    }\n});\nenchant.CanvasRenderer.instance = new enchant.CanvasRenderer();\n\n/**\n * @scope enchant.Scene.prototype\n * @type {*}\n */\nenchant.Scene = enchant.Class.create(enchant.Group, {\n    /**\n     * @name enchant.Scene\n     * @class\n     * 表示オブジェクトツリーのルートになるクラス.\n     * シーンはレイヤーを持っていて、子として追加されたオブジェクト (Entity) は描画方法に応じてレイヤーに振り分けられる。\n     * Scene クラスは最も汎用的なシーンの実装で、({@link enchant.DOMLayer} と {@link enchant.CanvasLayer}) を持っており、\n     * それぞれ DOM, Canvas を用いて描画される。描画順は DOM が手前、Canvas が奥で、\n     * 各レイヤーの間では新しく追加されたオブジェクトほど手前に表示される。\n     * Scene クラスを継承することで、新しい種類の Layer を持つシーンクラスを作ることができる。\n     *\n     * @example\n     *   var scene = new Scene();\n     *   scene.addChild(player);\n     *   scene.addChild(enemy);\n     *   core.pushScene(scene);\n     *\n     * @constructs\n     * @extends enchant.Group\n     */\n    initialize: function() {\n        var core = enchant.Core.instance;\n\n        // Call initialize method of enchant.Group\n        enchant.Group.call(this);\n\n        // All nodes (entities, groups, scenes) have reference to the scene that it belongs to.\n        this.scene = this;\n\n        this._backgroundColor = null;\n\n        // Create div tag which possesses its layers\n        this._element = document.createElement('div');\n        this._element.style.position = 'absolute';\n        this._element.style.overflow = 'hidden';\n        this._element.style[enchant.ENV.VENDOR_PREFIX + 'TransformOrigin'] = '0 0';\n\n        this._layers = {};\n        this._layerPriority = [];\n\n        this.addEventListener(enchant.Event.CHILD_ADDED, this._onchildadded);\n        this.addEventListener(enchant.Event.CHILD_REMOVED, this._onchildremoved);\n        this.addEventListener(enchant.Event.ENTER, this._onenter);\n        this.addEventListener(enchant.Event.EXIT, this._onexit);\n\n        var that = this;\n        this._dispatchExitframe = function() {\n            var layer;\n            for (var prop in that._layers) {\n                layer = that._layers[prop];\n                layer.dispatchEvent(new enchant.Event(enchant.Event.EXIT_FRAME));\n            }\n        };\n\n        this.addEventListener(enchant.Event.CORE_RESIZE, this._oncoreresize);\n\n        this._oncoreresize(core);\n    },\n    x: {\n        get: function() {\n            return this._x;\n        },\n        set: function(x) {\n            this._x = x;\n            for (var type in this._layers) {\n                this._layers[type].x = x;\n            }\n        }\n    },\n    y: {\n        get: function() {\n            return this._y;\n        },\n        set: function(y) {\n            this._y = y;\n            for (var type in this._layers) {\n                this._layers[type].y = y;\n            }\n        }\n    },\n    width: {\n        get: function() {\n            return this._width;\n        },\n        set: function(width) {\n            this._width = width;\n            for (var type in this._layers) {\n                this._layers[type].width = width;\n            }\n        }\n    },\n    height: {\n        get: function() {\n            return this._height;\n        },\n        set: function(height) {\n            this._height = height;\n            for (var type in this._layers) {\n                this._layers[type].height = height;\n            }\n        }\n    },\n    rotation: {\n        get: function() {\n            return this._rotation;\n        },\n        set: function(rotation) {\n            this._rotation = rotation;\n            for (var type in this._layers) {\n                this._layers[type].rotation = rotation;\n            }\n        }\n    },\n    scaleX: {\n        get: function() {\n            return this._scaleX;\n        },\n        set: function(scaleX) {\n            this._scaleX = scaleX;\n            for (var type in this._layers) {\n                this._layers[type].scaleX = scaleX;\n            }\n        }\n    },\n    scaleY: {\n        get: function() {\n            return this._scaleY;\n        },\n        set: function(scaleY) {\n            this._scaleY = scaleY;\n            for (var type in this._layers) {\n                this._layers[type].scaleY = scaleY;\n            }\n        }\n    },\n    backgroundColor: {\n        get: function() {\n            return this._backgroundColor;\n        },\n        set: function(color) {\n            this._backgroundColor = this._element.style.backgroundColor = color;\n        }\n    },\n    _oncoreresize: function(e) {\n        this._element.style.width = e.width + 'px';\n        this.width = e.width;\n        this._element.style.height = e.height + 'px';\n        this.height = e.height;\n        this._element.style[enchant.ENV.VENDOR_PREFIX + 'Transform'] = 'scale(' + e.scale + ')';\n\n        for (var type in this._layers) {\n            this._layers[type].dispatchEvent(e);\n        }\n    },\n    addLayer: function(type, i) {\n        var core = enchant.Core.instance;\n        if (this._layers[type]) {\n            return;\n        }\n        var layer = new enchant[type + 'Layer']();\n        if (core.currentScene === this) {\n            layer._startRendering();\n        }\n        this._layers[type] = layer;\n        var element = layer._element;\n        if (typeof i === 'number') {\n            var nextSibling = this._element.childNodes[i];\n            if (nextSibling) {\n                this._element.insertBefore(element, nextSibling);\n            } else {\n                this._element.appendChild(element);\n            }\n            this._layerPriority.splice(i, 0, type);\n        } else {\n            this._element.appendChild(element);\n            this._layerPriority.push(type);\n        }\n        layer._scene = this;\n    },\n    _determineEventTarget: function(e) {\n        var layer, target;\n        for (var i = this._layerPriority.length - 1; i >= 0; i--) {\n            layer = this._layers[this._layerPriority[i]];\n            target = layer._determineEventTarget(e);\n            if (target) {\n                break;\n            }\n        }\n        if (!target) {\n            target = this;\n        }\n        return target;\n    },\n    _onchildadded: function(e) {\n        var child = e.node;\n        var next = e.next;\n        var target, i;\n        if (child._element) {\n            target = 'Dom';\n            i = 1;\n        } else {\n            target = 'Canvas';\n            i = 0;\n        }\n        if (!this._layers[target]) {\n            this.addLayer(target, i);\n        }\n        child._layer = this._layers[target];\n        this._layers[target].insertBefore(child, next);\n        child.parentNode = this;\n    },\n    _onchildremoved: function(e) {\n        var child = e.node;\n        child._layer.removeChild(child);\n        child._layer = null;\n    },\n    _onenter: function() {\n        for (var type in this._layers) {\n            this._layers[type]._startRendering();\n        }\n        enchant.Core.instance.addEventListener('exitframe', this._dispatchExitframe);\n    },\n    _onexit: function() {\n        for (var type in this._layers) {\n            this._layers[type]._stopRendering();\n        }\n        enchant.Core.instance.removeEventListener('exitframe', this._dispatchExitframe);\n    }\n});\n\n/**\n * @scope enchant.LoadingScene.prototype\n */\nenchant.LoadingScene = enchant.Class.create(enchant.Scene, {\n    /**\n     * @name enchant.LoadingScene.\n     * @class\n     * @constructs\n     * @extends enchant.Scene\n     */\n    initialize: function() {\n        enchant.Scene.call(this);\n        this.backgroundColor = '#000';\n        var barWidth = this.width * 0.4 | 0;\n        var barHeight = this.width * 0.05 | 0;\n        var border = barWidth * 0.03 | 0;\n        var bar = new enchant.Sprite(barWidth, barHeight);\n        bar.disableCollection();\n        bar.x = (this.width - barWidth) / 2;\n        bar.y = (this.height - barHeight) / 2;\n        var image = new enchant.Surface(barWidth, barHeight);\n        image.context.fillStyle = '#fff';\n        image.context.fillRect(0, 0, barWidth, barHeight);\n        image.context.fillStyle = '#000';\n        image.context.fillRect(border, border, barWidth - border * 2, barHeight - border * 2);\n        bar.image = image;\n        var progress = 0, _progress = 0;\n        this.addEventListener('progress', function(e) {\n            // avoid #167 https://github.com/wise9/enchant.js/issues/177\n            progress = e.loaded / e.total * 1.0;\n        });\n        bar.addEventListener('enterframe', function() {\n            _progress *= 0.9;\n            _progress += progress * 0.1;\n            image.context.fillStyle = '#fff';\n            image.context.fillRect(border, 0, (barWidth - border * 2) * _progress, barHeight);\n        });\n        this.addChild(bar);\n        this.addEventListener('load', function(e) {\n            var core = enchant.Core.instance;\n            core.removeScene(core.loadingScene);\n            core.dispatchEvent(e);\n        });\n    }\n});\n\n/**\n * @scope enchant.CanvasScene.prototype\n * @type {*}\n */\nenchant.CanvasScene = enchant.Class.create(enchant.Scene, {\n    initialize: function() {\n        enchant.Scene.call(this);\n        this.addLayer('Canvas');\n    },\n    _determineEventTarget: function(e) {\n        var target = this._layers.Canvas._determineEventTarget(e);\n        if (!target) {\n            target = this;\n        }\n        return target;\n    },\n    _onchildadded: function(e) {\n        var child = e.node;\n        var next = e.next;\n        child._layer = this._layers.Canvas;\n        this._layers.Canvas.insertBefore(child, next);\n    },\n    _onenter: function() {\n        this._layers.Canvas._startRendering();\n        enchant.Core.instance.addEventListener('exitframe', this._dispatchExitframe);\n    },\n    _onexit: function() {\n        this._layers.Canvas._stopRendering();\n        enchant.Core.instance.removeEventListener('exitframe', this._dispatchExitframe);\n    }\n});\n\n/**\n * @scope enchant.CanvasScene.prototype\n * @type {*}\n */\nenchant.DOMScene = enchant.Class.create(enchant.Scene, {\n    initialize: function() {\n        enchant.Scene.call(this);\n        this.addLayer('Dom');\n    },\n    _determineEventTarget: function(e) {\n        var target = this._layers.Dom._determineEventTarget(e);\n        if (!target) {\n            target = this;\n        }\n        return target;\n    },\n    _onchildadded: function(e) {\n        var child = e.node;\n        var next = e.next;\n        child._layer = this._layers.Dom;\n        this._layers.Dom.insertBefore(child, next);\n    },\n    _onenter: function() {\n        this._layers.Dom._startRendering();\n        enchant.Core.instance.addEventListener('exitframe', this._dispatchExitframe);\n    },\n    _onexit: function() {\n        this._layers.Dom._stopRendering();\n        enchant.Core.instance.removeEventListener('exitframe', this._dispatchExitframe);\n    }\n});\n\n/**\n * @scope enchant.Surface.prototype\n */\nenchant.Surface = enchant.Class.create(enchant.EventTarget, {\n    /**\n     * @name enchant.Surface\n     * @class\n     * canvas要素をラップしたクラス.\n     *\n     * {@link enchant.Sprite}や{@link enchant.Map}のimageプロパティに設定して表示させることができる.\n     * Canvas APIにアクセスしたいときは{@link enchant.Surface#context}プロパティを用いる.\n     *\n     * @example\n     *   // 円を表示するSpriteを作成する\n     *   var ball = new Sprite(50, 50);\n     *   var surface = new Surface(50, 50);\n     *   surface.context.beginPath();\n     *   surface.context.arc(25, 25, 25, 0, Math.PI*2, true);\n     *   surface.context.fill();\n     *   ball.image = surface;\n     *\n     * @param {Number} width Surfaceの横幅.\n     * @param {Number} height Surfaceの高さ.\n     * @constructs\n     */\n    initialize: function(width, height) {\n        enchant.EventTarget.call(this);\n\n        var core = enchant.Core.instance;\n\n        /**\n         * Surfaceの横幅.\n         * @type {Number}\n         */\n        this.width = width;\n        /**\n         * Surfaceの高さ.\n         * @type {Number}\n         */\n        this.height = height;\n        /**\n         * Surfaceの描画コンテクスト.\n         * @type {CanvasRenderingContext2D}\n         */\n        this.context = null;\n\n        var id = 'enchant-surface' + core._surfaceID++;\n        if (document.getCSSCanvasContext) {\n            this.context = document.getCSSCanvasContext('2d', id, width, height);\n            this._element = this.context.canvas;\n            this._css = '-webkit-canvas(' + id + ')';\n            var context = this.context;\n        } else if (document.mozSetImageElement) {\n            this._element = document.createElement('canvas');\n            this._element.width = width;\n            this._element.height = height;\n            this._css = '-moz-element(#' + id + ')';\n            this.context = this._element.getContext('2d');\n            document.mozSetImageElement(id, this._element);\n        } else {\n            this._element = document.createElement('canvas');\n            this._element.width = width;\n            this._element.height = height;\n            this._element.style.position = 'absolute';\n            this.context = this._element.getContext('2d');\n\n            enchant.ENV.CANVAS_DRAWING_METHODS.forEach(function(name) {\n                var method = this.context[name];\n                this.context[name] = function() {\n                    method.apply(this, arguments);\n                    this._dirty = true;\n                };\n            }, this);\n        }\n    },\n    /**\n     * Surfaceから1ピクセル取得する.\n     * @param {Number} x 取得するピクセルのx座標.\n     * @param {Number} y 取得するピクセルのy座標.\n     * @return {Array.<Number>} ピクセルの情報を[r, g, b, a]の形式で持つ配列.\n     */\n    getPixel: function(x, y) {\n        return this.context.getImageData(x, y, 1, 1).data;\n    },\n    /**\n     * Surfaceに1ピクセル設定する.\n     * @param {Number} x 設定するピクセルのx座標.\n     * @param {Number} y 設定するピクセルのy座標.\n     * @param {Number} r 設定するピクセルのrの値.\n     * @param {Number} g 設定するピクセルのgの値.\n     * @param {Number} b 設定するピクセルのbの値.\n     * @param {Number} a 設定するピクセルの透明度.\n     */\n    setPixel: function(x, y, r, g, b, a) {\n        var pixel = this.context.createImageData(1, 1);\n        pixel.data[0] = r;\n        pixel.data[1] = g;\n        pixel.data[2] = b;\n        pixel.data[3] = a;\n        this.context.putImageData(pixel, x, y);\n    },\n    /**\n     * Surfaceの全ピクセルをクリアし透明度0の黒に設定する.\n     */\n    clear: function() {\n        this.context.clearRect(0, 0, this.width, this.height);\n    },\n    /**\n     * Surfaceに対して引数で指定されたSurfaceを描画する.\n     *\n     * Canvas APIのdrawImageをラップしており, 描画する矩形を同様の形式で指定できる.\n     *\n     * @example\n     *   var src = core.assets['src.gif'];\n     *   var dst = new Surface(100, 100);\n     *   dst.draw(src);         // ソースを(0, 0)に描画\n     *   dst.draw(src, 50, 50); // ソースを(50, 50)に描画\n     *   // ソースを(50, 50)に縦横30ピクセル分だけ描画\n     *   dst.draw(src, 50, 50, 30, 30);\n     *   // ソースの(10, 10)から縦横40ピクセルの領域を(50, 50)に縦横30ピクセルに縮小して描画\n     *   dst.draw(src, 10, 10, 40, 40, 50, 50, 30, 30);\n     *\n     * @param {enchant.Surface} image 描画に用いるSurface.\n     */\n    draw: function(image) {\n        image = image._element;\n        if (arguments.length === 1) {\n            this.context.drawImage(image, 0, 0);\n        } else {\n            var args = arguments;\n            args[0] = image;\n            this.context.drawImage.apply(this.context, args);\n        }\n    },\n    /**\n     * Surfaceを複製する.\n     * @return {enchant.Surface} 複製されたSurface.\n     */\n    clone: function() {\n        var clone = new enchant.Surface(this.width, this.height);\n        clone.draw(this);\n        return clone;\n    },\n    /**\n     * SurfaceからdataスキームのURLを生成する.\n     * @return {String} Surfaceを表すdataスキームのURL.\n     */\n    toDataURL: function() {\n        var src = this._element.src;\n        if (src) {\n            if (src.slice(0, 5) === 'data:') {\n                return src;\n            } else {\n                return this.clone().toDataURL();\n            }\n        } else {\n            return this._element.toDataURL();\n        }\n    }\n});\n\n/**\n * 画像ファイルを読み込んでSurfaceオブジェクトを作成する.\n *\n * このメソッドによって作成されたSurfaceはimg要素のラップしており{@link enchant.Surface#context}プロパティに\n * アクセスしたり{@link enchant.Surface#draw}, {@link enchant.Surface#clear}, {@link enchant.Surface#getPixel},\n * {@link enchant.Surface#setPixel}メソッドなどの呼び出しでCanvas APIを使った画像操作を行うことはできない.\n * ただし{@link enchant.Surface#draw}メソッドの引数とすることはでき,\n * ほかのSurfaceに描画した上で画像操作を行うことはできる(クロスドメインでロードした\n * 場合はピクセルを取得するなど画像操作の一部が制限される).\n *\n * @param {String} src ロードする画像ファイルのパス.\n * @param {Function} callback ロード完了時のコールバック.\n * @param {Function} [onerror] ロード失敗時のコールバック.\n * @static\n * @return {enchant.Surface} Surface\n */\nenchant.Surface.load = function(src, callback, onerror) {\n    var image = new Image();\n    var surface = Object.create(enchant.Surface.prototype, {\n        context: { value: null },\n        _css: { value: 'url(' + src + ')' },\n        _element: { value: image }\n    });\n    enchant.EventTarget.call(surface);\n    onerror = onerror || function() {};\n    surface.addEventListener('load', callback);\n    surface.addEventListener('error', onerror);\n    image.onerror = function() {\n        var e = new enchant.Event(enchant.Event.ERROR);\n        e.message = 'Cannot load an asset: ' + image.src;\n        enchant.Core.instance.dispatchEvent(e);\n        surface.dispatchEvent(e);\n    };\n    image.onload = function() {\n        surface.width = image.width;\n        surface.height = image.height;\n        surface.dispatchEvent(new enchant.Event('load'));\n    };\n    image.src = src;\n    return surface;\n};\nenchant.Surface._staticCanvas2DContext = document.createElement('canvas').getContext('2d');\n\nenchant.Surface._getPattern = function(surface, force) {\n    if (!surface._pattern || force) {\n        surface._pattern = this._staticCanvas2DContext.createPattern(surface._element, 'repeat');\n    }\n    return surface._pattern;\n};\n\nif (window.Deferred) {\n    enchant.Deferred = window.Deferred;\n} else {\n    enchant.Deferred = enchant.Class.create({\n        initialize: function() {\n            this._succ = this._fail = this._next = this._id = null;\n            this._tail = this;\n        },\n        next: function(func) {\n            var q = new enchant.Deferred();\n            q._succ = func;\n            return this._add(q);\n        },\n        error: function(func) {\n            var q = new enchant.Deferred();\n            q._fail = func;\n            return this._add(q);\n        },\n        _add: function(queue) {\n            this._tail._next = queue;\n            this._tail = queue;\n            return this;\n        },\n        call: function(arg) {\n            var received;\n            var queue = this;\n            while (queue && !queue._succ) {\n                queue = queue._next;\n            }\n            if (!(queue instanceof enchant.Deferred)) {\n                return;\n            }\n            try {\n                received = queue._succ(arg);\n            } catch (e) {\n                return queue.fail(e);\n            }\n            if (received instanceof enchant.Deferred) {\n                enchant.Deferred._insert(queue, received);\n            } else if (queue._next instanceof enchant.Deferred) {\n                queue._next.call(received);\n            }\n        },\n        fail: function(arg) {\n            var result, err,\n                queue = this;\n            while (queue && !queue._fail) {\n                queue = queue._next;\n            }\n            if (queue instanceof enchant.Deferred) {\n                result = queue._fail(arg);\n                queue.call(result);\n            } else if (arg instanceof Error) {\n                throw arg;\n            } else {\n                err = new Error('failed in Deferred');\n                err.arg = arg;\n                throw err;\n            }\n        }\n    });\n    enchant.Deferred._insert = function(queue, ins) {\n        if (queue._next instanceof enchant.Deferred) {\n            ins._next = queue._next;\n        }\n        queue._next = ins;\n    };\n    enchant.Deferred.next = function(func) {\n        var q = new enchant.Deferred().next(func);\n        q._id = setTimeout(function() { q.call(); }, 0);\n        return q;\n    };\n    enchant.Deferred.parallel = function(arg) {\n        var q = new enchant.Deferred();\n        q._id = setTimeout(function() { q.call(); }, 0);\n        var progress = 0;\n        var ret = (arg instanceof Array) ? [] : {};\n        var p = new enchant.Deferred();\n        for (var prop in arg) {\n            if (arg.hasOwnProperty(prop)) {\n                progress++;\n                /*jshint loopfunc:true */\n                (function(queue, name) {\n                    queue.next(function(arg) {\n                        progress--;\n                        ret[name] = arg;\n                        if (progress <= 0) {\n                            p.call(ret);\n                        }\n                    })\n                    .error(function(err) { p.fail(err); });\n                    if (typeof queue._id === 'number') {\n                        clearTimeout(queue._id);\n                    }\n                    queue._id = setTimeout(function() { queue.call(); }, 0);\n                }(arg[prop], prop));\n            }\n        }\n        if (!progress) {\n            p._id = setTimeout(function() { p.call(ret); }, 0);\n        }\n        return q.next(function() { return p; });\n    };\n}\n\n/**\n * @scope enchant.DOMSound.prototype\n * @type {*}\n */\nenchant.DOMSound = enchant.Class.create(enchant.EventTarget, {\n    /**\n     * @name enchant.DOMSound\n     * @class\n     * audio要素をラップしたクラス.\n     *\n     * MP3ファイルの再生はSafari, Chrome, Firefox, Opera, IEが対応\n     * (Firefox, OperaではFlashを経由して再生). WAVEファイルの再生は\n     * Safari, Chrome, Firefox, Operaが対応している. ブラウザが音声ファイル\n     * のコーデックに対応していない場合は再生されない.\n     *\n     * コンストラクタではなく{@link enchant.DOMSound.load}を通じてインスタンスを作成する.\n     * @constructs\n     */\n    initialize: function() {\n        enchant.EventTarget.call(this);\n        /**\n         * Soundの再生時間 (秒).\n         * @type {Number}\n         */\n        this.duration = 0;\n        throw new Error(\"Illegal Constructor\");\n    },\n    /**\n     * 再生を開始する.\n     */\n    play: function() {\n        if (this._element) {\n            this._element.play();\n        }\n    },\n    /**\n     * 再生を中断する.\n     */\n    pause: function() {\n        if (this._element) {\n            this._element.pause();\n        }\n    },\n    /**\n     * 再生を停止する.\n     */\n    stop: function() {\n        this.pause();\n        this.currentTime = 0;\n    },\n    /**\n     * Soundを複製する.\n     * @return {enchant.DOMSound} 複製されたSound.\n     */\n    clone: function() {\n        var clone;\n        if (this._element instanceof Audio) {\n            clone = Object.create(enchant.DOMSound.prototype, {\n                _element: { value: this._element.cloneNode(false) },\n                duration: { value: this.duration }\n            });\n        } else if (enchant.ENV.USE_FLASH_SOUND) {\n            return this;\n        } else {\n            clone = Object.create(enchant.DOMSound.prototype);\n        }\n        enchant.EventTarget.call(clone);\n        return clone;\n    },\n    /**\n     * 現在の再生位置 (秒).\n     * @type {Number}\n     */\n    currentTime: {\n        get: function() {\n            return this._element ? this._element.currentTime : 0;\n        },\n        set: function(time) {\n            if (this._element) {\n                this._element.currentTime = time;\n            }\n        }\n    },\n    /**\n     * ボリューム. 0 (無音) ～ 1 (フルボリューム).\n     * @type {Number}\n     */\n    volume: {\n        get: function() {\n            return this._element ? this._element.volume : 1;\n        },\n        set: function(volume) {\n            if (this._element) {\n                this._element.volume = volume;\n            }\n        }\n    }\n});\n\n/**\n * 音声ファイルを読み込んでSoundオブジェクトを作成する.\n *\n * @param {String} src ロードする音声ファイルのパス.\n * @param {String} [type] 音声ファイルのMIME Type.\n * @param {Function} callback ロード完了時のコールバック.\n * @param {Function} [onerror] ロード失敗時のコールバック.\n * @return {enchant.DOMSound} DOMSound\n * @static\n */\nenchant.DOMSound.load = function(src, type, callback, onerror) {\n    if (type == null) {\n        var ext = enchant.Core.findExt(src);\n        if (ext) {\n            type = 'audio/' + ext;\n        } else {\n            type = '';\n        }\n    }\n    type = type.replace('mp3', 'mpeg').replace('m4a', 'mp4');\n    onerror = onerror || function() {};\n\n    var sound = Object.create(enchant.DOMSound.prototype);\n    enchant.EventTarget.call(sound);\n    sound.addEventListener('load', callback);\n    sound.addEventListener('error', onerror);\n    var audio = new Audio();\n    if (!enchant.ENV.SOUND_ENABLED_ON_MOBILE_SAFARI &&\n        enchant.ENV.VENDOR_PREFIX === 'webkit' && enchant.ENV.TOUCH_ENABLED) {\n        window.setTimeout(function() {\n            sound.dispatchEvent(new enchant.Event('load'));\n        }, 0);\n    } else {\n        if (!enchant.ENV.USE_FLASH_SOUND && audio.canPlayType(type)) {\n            audio.addEventListener('canplaythrough', function() {\n                sound.duration = audio.duration;\n                sound.dispatchEvent(new enchant.Event('load'));\n            }, false);\n            audio.src = src;\n            audio.load();\n            audio.autoplay = false;\n            audio.onerror = function() {\n                var e = new enchant.Event(enchant.Event.ERROR);\n                e.message = 'Cannot load an asset: ' + audio.src;\n                enchant.Core.instance.dispatchEvent(e);\n                sound.dispatchEvent(e);\n            };\n            sound._element = audio;\n        } else if (type === 'audio/mpeg') {\n            var embed = document.createElement('embed');\n            var id = 'enchant-audio' + enchant.Core.instance._soundID++;\n            embed.width = embed.height = 1;\n            embed.name = id;\n            embed.src = 'sound.swf?id=' + id + '&src=' + src;\n            embed.allowscriptaccess = 'always';\n            embed.style.position = 'absolute';\n            embed.style.left = '-1px';\n            sound.addEventListener('load', function() {\n                Object.defineProperties(embed, {\n                    currentTime: {\n                        get: function() {\n                            return embed.getCurrentTime();\n                        },\n                        set: function(time) {\n                            embed.setCurrentTime(time);\n                        }\n                    },\n                    volume: {\n                        get: function() {\n                            return embed.getVolume();\n                        },\n                        set: function(volume) {\n                            embed.setVolume(volume);\n                        }\n                    }\n                });\n                sound._element = embed;\n                sound.duration = embed.getDuration();\n            });\n            enchant.Core.instance._element.appendChild(embed);\n            enchant.DOMSound[id] = sound;\n        } else {\n            window.setTimeout(function() {\n                sound.dispatchEvent(new enchant.Event('load'));\n            }, 0);\n        }\n    }\n    return sound;\n};\n\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.msAudioContext || window.oAudioContext;\n\n/**\n * @scope enchant.WebAudioSound.prototype\n * @type {*}\n */\nenchant.WebAudioSound = enchant.Class.create(enchant.EventTarget, {\n    /**\n     * @name enchant.WebAudioSound\n     * @class\n     * Sound wrapper class for Web Audio API (supported on some webkit-based browsers)\n     *\n     * @constructs\n     */\n    initialize: function() {\n        if(!window.webkitAudioContext){\n            throw new Error(\"This browser does not support WebAudio API.\");\n        }\n        var actx = enchant.WebAudioSound.audioContext;\n        enchant.EventTarget.call(this);\n        this.src = actx.createBufferSource();\n        this.buffer = null;\n        this._volume = 1;\n        this._currentTime = 0;\n        this._state = 0;\n        this.connectTarget = enchant.WebAudioSound.destination;\n    },\n    play: function(dup) {\n        var actx = enchant.WebAudioSound.audioContext;\n        if (this._state === 2) {\n            this.src.connect(this.connectTarget);\n        } else {\n            if (this._state === 1 && !dup) {\n                this.src.disconnect(this.connectTarget);\n            }\n            this.src = actx.createBufferSource();\n            this.src.buffer = this.buffer;\n            this.src.gain.value = this._volume;\n            this.src.connect(this.connectTarget);\n            this.src.noteOn(0);\n        }\n        this._state = 1;\n    },\n    pause: function() {\n        var actx = enchant.WebAudioSound.audioContext;\n        this.src.disconnect(this.connectTarget);\n        this._state = 2;\n    },\n    stop: function() {\n        this.src.noteOff(0);\n        this._state = 0;\n    },\n    clone: function() {\n        var sound = new enchant.WebAudioSound();\n        sound.buffer = this.buffer;\n        return sound;\n    },\n    dulation: {\n        get: function() {\n            if (this.buffer) {\n                return this.buffer.dulation;\n            } else {\n                return 0;\n            }\n        }\n    },\n    volume: {\n        get: function() {\n            return this._volume;\n        },\n        set: function(volume) {\n            volume = Math.max(0, Math.min(1, volume));\n            this._volume = volume;\n            if (this.src) {\n                this.src.gain.value = volume;\n            }\n        }\n    },\n    currentTime: {\n        get: function() {\n            window.console.log('currentTime is not allowed');\n            return this._currentTime;\n        },\n        set: function(time) {\n            window.console.log('currentTime is not allowed');\n            this._currentTime = time;\n        }\n    }\n});\n\nenchant.WebAudioSound.load = function(src, type, callback, onerror) {\n    var canPlay = (new Audio()).canPlayType(type);\n    var sound = new enchant.WebAudioSound();\n    onerror = onerror || function() {};\n    sound.addEventListener(enchant.Event.LOAD, callback);\n    sound.addEventListener(enchant.Event.ERROR, onerror);\n    var e = new enchant.Event(enchant.Event.ERROR);\n    e.message = 'Cannot load an asset: ' + src;\n    var actx, xhr;\n    if (canPlay === 'maybe' || canPlay === 'probably') {\n        actx = enchant.WebAudioSound.audioContext;\n        xhr = new XMLHttpRequest();\n        xhr.responseType = 'arraybuffer';\n        xhr.open('GET', src, true);\n        xhr.onload = function() {\n            actx.decodeAudioData(\n                xhr.response,\n                function(buffer) {\n                    sound.buffer = buffer;\n                    sound.dispatchEvent(new enchant.Event(enchant.Event.LOAD));\n                },\n                function(error) {\n                    enchant.Core.instance.dispatchEvent(e);\n                    sound.dispatchEvent(e);\n                }\n            );\n        };\n        xhr.send(null);\n    } else {\n        setTimeout(function() {\n            sound.dispatchEvent(e);\n        }, 50);\n    }\n    return sound;\n};\n\nif(window.AudioContext){\n    enchant.WebAudioSound.audioContext = new window.AudioContext();\n    enchant.WebAudioSound.destination = enchant.WebAudioSound.audioContext.destination;\n}\n\n/* jshint newcap: false */\n\nenchant.Sound = window.AudioContext && enchant.ENV.USE_WEBAUDIO ? enchant.WebAudioSound : enchant.DOMSound;\n\n/**\n * ============================================================================================\n * Easing Equations v2.0\n * September 1, 2003\n * (c) 2003 Robert Penner, all rights reserved.\n * This work is subject to the terms in http://www.robertpenner.com/easing_terms_of_use.html.\n * ============================================================================================\n */\n\n/**\n * イージング関数ライブラリ\n * {@link enchant.Easing} 以下にある関数は全て t(現在の時刻), b(初期値), c(変化後の値), d(値の変化にかける時間) の引数を取り、指定した時刻に取る値を返す。\n * ActionScript で広く使われている Robert Penner による Easing Equations を JavaScript に移植した。\n *\n * @see http://www.robertpenner.com/easing/\n * @see http://www.robertpenner.com/easing/penner_chapter7_tweening.pdf\n * Easing function library, from \"Easing Equations\" by Robert Penner.\n * @type {Object}\n * @namespace\n * {@link enchant.Tween} クラスで用いるイージング関数のライブラリ名前空間.\n */\nenchant.Easing = {\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    LINEAR: function(t, b, c, d) {\n        return c * t / d + b;\n    },\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    SWING: function(t, b, c, d) {\n        return c * (0.5 - Math.cos(((t / d) * Math.PI)) / 2) + b;\n    },\n    // quad\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    QUAD_EASEIN: function(t, b, c, d) {\n        return c * (t /= d) * t + b;\n    },\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    QUAD_EASEOUT: function(t, b, c, d) {\n        return -c * (t /= d) * (t - 2) + b;\n    },\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    QUAD_EASEINOUT: function(t, b, c, d) {\n        if ((t /= d / 2) < 1) {\n            return c / 2 * t * t + b;\n        }\n        return -c / 2 * ((--t) * (t - 2) - 1) + b;\n    },\n    // cubic\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    CUBIC_EASEIN: function(t, b, c, d) {\n        return c * (t /= d) * t * t + b;\n    },\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    CUBIC_EASEOUT: function(t, b, c, d) {\n        return c * ((t = t / d - 1) * t * t + 1) + b;\n    },\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    CUBIC_EASEINOUT: function(t, b, c, d) {\n        if ((t /= d / 2) < 1) {\n            return c / 2 * t * t * t + b;\n        }\n        return c / 2 * ((t -= 2) * t * t + 2) + b;\n    },\n    // quart\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    QUART_EASEIN: function(t, b, c, d) {\n        return c * (t /= d) * t * t * t + b;\n    },\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    QUART_EASEOUT: function(t, b, c, d) {\n        return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n    },\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    QUART_EASEINOUT: function(t, b, c, d) {\n        if ((t /= d / 2) < 1) {\n            return c / 2 * t * t * t * t + b;\n        }\n        return -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n    },\n    // quint\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    QUINT_EASEIN: function(t, b, c, d) {\n        return c * (t /= d) * t * t * t * t + b;\n    },\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    QUINT_EASEOUT: function(t, b, c, d) {\n        return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n    },\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    QUINT_EASEINOUT: function(t, b, c, d) {\n        if ((t /= d / 2) < 1) {\n            return c / 2 * t * t * t * t * t + b;\n        }\n        return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n    },\n    //sin\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    SIN_EASEIN: function(t, b, c, d) {\n        return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n    },\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    SIN_EASEOUT: function(t, b, c, d) {\n        return c * Math.sin(t / d * (Math.PI / 2)) + b;\n    },\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    SIN_EASEINOUT: function(t, b, c, d) {\n        return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n    },\n    // circ\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    CIRC_EASEIN: function(t, b, c, d) {\n        return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n    },\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    CIRC_EASEOUT: function(t, b, c, d) {\n        return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n    },\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    CIRC_EASEINOUT: function(t, b, c, d) {\n        if ((t /= d / 2) < 1) {\n            return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n        }\n        return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n    },\n    // elastic\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    ELASTIC_EASEIN: function(t, b, c, d, a, p) {\n        if (t === 0) {\n            return b;\n        }\n        if ((t /= d) === 1) {\n            return b + c;\n        }\n\n        if (!p) {\n            p = d * 0.3;\n        }\n\n        var s;\n        if (!a || a < Math.abs(c)) {\n            a = c;\n            s = p / 4;\n        } else {\n            s = p / (2 * Math.PI) * Math.asin(c / a);\n        }\n        return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n    },\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    ELASTIC_EASEOUT: function(t, b, c, d, a, p) {\n        if (t === 0) {\n            return b;\n        }\n        if ((t /= d) === 1) {\n            return b + c;\n        }\n        if (!p) {\n            p = d * 0.3;\n        }\n        var s;\n        if (!a || a < Math.abs(c)) {\n            a = c;\n            s = p / 4;\n        } else {\n            s = p / (2 * Math.PI) * Math.asin(c / a);\n        }\n        return (a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b);\n    },\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    ELASTIC_EASEINOUT: function(t, b, c, d, a, p) {\n        if (t === 0) {\n            return b;\n        }\n        if ((t /= d / 2) === 2) {\n            return b + c;\n        }\n        if (!p) {\n            p = d * (0.3 * 1.5);\n        }\n        var s;\n        if (!a || a < Math.abs(c)) {\n            a = c;\n            s = p / 4;\n        } else {\n            s = p / (2 * Math.PI) * Math.asin(c / a);\n        }\n        if (t < 1) {\n            return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n        }\n        return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * 0.5 + c + b;\n    },\n    // bounce\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    BOUNCE_EASEOUT: function(t, b, c, d) {\n        if ((t /= d) < (1 / 2.75)) {\n            return c * (7.5625 * t * t) + b;\n        } else if (t < (2 / 2.75)) {\n            return c * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75) + b;\n        } else if (t < (2.5 / 2.75)) {\n            return c * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375) + b;\n        } else {\n            return c * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375) + b;\n        }\n    },\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    BOUNCE_EASEIN: function(t, b, c, d) {\n        return c - enchant.Easing.BOUNCE_EASEOUT(d - t, 0, c, d) + b;\n    },\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    BOUNCE_EASEINOUT: function(t, b, c, d) {\n        if (t < d / 2) {\n            return enchant.Easing.BOUNCE_EASEIN(t * 2, 0, c, d) * 0.5 + b;\n        } else {\n            return enchant.Easing.BOUNCE_EASEOUT(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;\n        }\n\n    },\n    // back\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    BACK_EASEIN: function(t, b, c, d, s) {\n        if (s === undefined) {\n            s = 1.70158;\n        }\n        return c * (t /= d) * t * ((s + 1) * t - s) + b;\n    },\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    BACK_EASEOUT: function(t, b, c, d, s) {\n        if (s === undefined) {\n            s = 1.70158;\n        }\n        return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n    },\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    BACK_EASEINOUT: function(t, b, c, d, s) {\n        if (s === undefined) {\n            s = 1.70158;\n        }\n        if ((t /= d / 2) < 1) {\n            return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;\n        }\n        return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\n    },\n    // expo\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    EXPO_EASEIN: function(t, b, c, d) {\n        return (t === 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n    },\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    EXPO_EASEOUT: function(t, b, c, d) {\n        return (t === d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n    },\n    /**\n     * @param t\n     * @param b\n     * @param c\n     * @param d\n     * @return {Number}\n     */\n    EXPO_EASEINOUT: function(t, b, c, d) {\n        if (t === 0) {\n            return b;\n        }\n        if (t === d) {\n            return b + c;\n        }\n        if ((t /= d / 2) < 1) {\n            return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n        }\n        return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n    }\n};\n\n/**\n * Easing Equations v2.0\n */\n\n/**\n * @scope enchant.ActionEventTarget.prototype\n * @type {*}\n */\nenchant.ActionEventTarget = enchant.Class.create(enchant.EventTarget, {\n    /**\n     * @name enchant.ActionEventTarget\n     * @class\n     * {@link enchant.Action} クラス向けに拡張された {@link enchant.EventTarget} クラス .\n     * @constructs\n     * @extends enchant.EventTarget\n     */\n    initialize: function() {\n        enchant.EventTarget.apply(this, arguments);\n    },\n    /**\n     * Issue event.\n     * @param {enchant.Event} e Event issued.\n     */\n    dispatchEvent: function(e) {\n        var target;\n        if (this.node) {\n            target = this.node;\n            e.target = target;\n            e.localX = e.x - target._offsetX;\n            e.localY = e.y - target._offsetY;\n        } else {\n            this.node = null;\n        }\n\n        if (this['on' + e.type] != null) {\n            this['on' + e.type].call(target, e);\n        }\n        var listeners = this._listeners[e.type];\n        if (listeners != null) {\n            listeners = listeners.slice();\n            for (var i = 0, len = listeners.length; i < len; i++) {\n                listeners[i].call(target, e);\n            }\n        }\n    }\n});\n\n/**\n * @scope enchant.Timeline.prototype\n */\nenchant.Timeline = enchant.Class.create(enchant.EventTarget, {\n    /**\n     * @name enchant.Timeline\n     * @class\n     * アニメーションを管理するためのクラス.\n     *\n     * 操作するノードひとつに対して、必ずひとつのタイムラインが対応する。\n     * tl.enchant.js を読み込むと、Node クラスを継承したすべてのクラス (Group, Scene, Entity, Label, Sprite)の\n     *\n     * tl プロパティに、タイムラインクラスのインスタンスが生成される。\n     * タイムラインクラスは、自身に様々なアクションを追加するメソッドを持っており、\n     * これらを使うことで簡潔にアニメーションや様々な操作をすることができる。\n     * タイムラインクラスはフレームとタイムのアニメーションができる。\n     * @param node 操作の対象となるノード\n     * @param [unitialized] このパラメータがtrueならば、最初のaddメソッドが呼ばれる時nodeにenchant.Event.ENTER_FRAMEイベントリスナを追加される。\n     * @constructs\n     */\n    initialize: function(node) {\n        enchant.EventTarget.call(this);\n        this.node = node;\n        this.queue = [];\n        this.paused = false;\n        this.looped = false;\n        this.isFrameBased = true;\n        this._parallel = null;\n        this._activated = false;\n        this.addEventListener(enchant.Event.ENTER_FRAME, this.tick);\n    },\n    /**\n     * @private\n     */\n    _deactivateTimeline: function() {\n        if (this._activated) {\n            this._activated = false;\n            this.node.removeEventListener('enterframe', this._nodeEventListener);\n        }\n    },\n    /**\n     * @private\n     */\n    _activateTimeline: function() {\n        if (!this._activated && !this.paused) {\n            this.node.addEventListener(\"enterframe\", this._nodeEventListener);\n            this._activated = true;\n        }\n    },\n    /**\n     * 一つのenchant.Event.ENTER_FRAMEイベントはアニメーションに一つの時間単位になる。 （デフォルト）\n     */\n    setFrameBased: function() {\n        this.isFrameBased = true;\n    },\n    /**\n     * 一つのenchant.Event.ENTER_FRAMEイベントはアニメーションに前のフレームから経過した時間になる。\n     */\n    setTimeBased: function() {\n        this.isFrameBased = false;\n    },\n    /**\n     * キューの先頭にあるアクションを終了し、次のアクションへ移行する。\n     * アクションの中から呼び出されるが、外から呼び出すこともできる。\n     *\n     * アクション実行中に、アクションが終了した場合、\n     * もう一度 tick() 関数が呼ばれるため、1フレームに複数のアクションが処理される場合もある。\n     * ex.\n     *   sprite.tl.then(function A(){ .. }).then(function B(){ .. });\n     * と記述した場合、最初のフレームで A・B の関数どちらも実行される\n     */\n    next: function(remainingTime) {\n        var e, action = this.queue.shift();\n        e = new enchant.Event(\"actionend\");\n        e.timeline = this;\n        action.dispatchEvent(e);\n\n        if (this.queue.length === 0) {\n            this._activated = false;\n            this.node.removeEventListener('enterframe', this._nodeEventListener);\n            return;\n        }\n\n        if (this.looped) {\n            e = new enchant.Event(\"removedfromtimeline\");\n            e.timeline = this;\n            action.dispatchEvent(e);\n            action.frame = 0;\n\n            this.add(action);\n        } else {\n            // remove after dispatching removedfromtimeline event\n            e = new enchant.Event(\"removedfromtimeline\");\n            e.timeline = this;\n            action.dispatchEvent(e);\n        }\n        if (remainingTime > 0 || (this.queue[0] && this.queue[0].time === 0)) {\n            var event = new enchant.Event(\"enterframe\");\n            event.elapsed = remainingTime;\n            this.dispatchEvent(event);\n        }\n    },\n    /**\n     * ターゲットの enterframe イベントのリスナとして登録される関数\n     * 1フレーム経過する際に実行する処理が書かれている。\n     * (キューの先頭にあるアクションに対して、actionstart/actiontickイベントを発行する)\n     */\n    tick: function(enterFrameEvent) {\n        if (this.paused) {\n            return;\n        }\n        if (this.queue.length > 0) {\n            var action = this.queue[0];\n            if (action.frame === 0) {\n                var f;\n                f = new enchant.Event(\"actionstart\");\n                f.timeline = this;\n                action.dispatchEvent(f);\n            }\n\n            var e = new enchant.Event(\"actiontick\");\n            e.timeline = this;\n            if (this.isFrameBased) {\n                e.elapsed = 1;\n            } else {\n                e.elapsed = enterFrameEvent.elapsed;\n            }\n            action.dispatchEvent(e);\n        }\n    },\n    add: function(action) {\n        if (!this._activated) {\n            var tl = this;\n            this._nodeEventListener = function(e) {\n                tl.dispatchEvent(e);\n            };\n            this.node.addEventListener(\"enterframe\", this._nodeEventListener);\n\n            this._activated = true;\n        }\n        if (this._parallel) {\n            this._parallel.actions.push(action);\n            this._parallel = null;\n        } else {\n            this.queue.push(action);\n        }\n        action.frame = 0;\n\n        var e = new enchant.Event(\"addedtotimeline\");\n        e.timeline = this;\n        action.dispatchEvent(e);\n\n        e = new enchant.Event(\"actionadded\");\n        e.action = action;\n        this.dispatchEvent(e);\n\n        return this;\n    },\n    /**\n     * アクションを簡単に追加するためのメソッド。\n     * 実体は add メソッドのラッパ。\n     * @param params アクションの設定オブジェクト\n     */\n    action: function(params) {\n        return this.add(new enchant.Action(params));\n    },\n    /**\n     * トゥイーンを簡単に追加するためのメソッド。\n     * 実体は add メソッドのラッパ。\n     * @param params トゥイーンの設定オブジェクト。\n     */\n    tween: function(params) {\n        return this.add(new enchant.Tween(params));\n    },\n    /**\n     * タイムラインのキューをすべて破棄する。終了イベントは発行されない。\n     */\n    clear: function() {\n        var e = new enchant.Event(\"removedfromtimeline\");\n        e.timeline = this;\n\n        for (var i = 0, len = this.queue.length; i < len; i++) {\n            this.queue[i].dispatchEvent(e);\n        }\n        this.queue = [];\n        this._deactivateTimeline();\n        return this;\n    },\n    /**\n     * タイムラインを早送りする。\n     * 指定したフレーム数が経過したのと同様の処理を、瞬時に実行する。\n     * 巻き戻しはできない。\n     * @param frames\n     */\n    skip: function(frames) {\n        var event = new enchant.Event(\"enterframe\");\n        if (this.isFrameBased) {\n            event.elapsed = 1;\n        } else {\n            event.elapsed = frames;\n            frames = 1;\n        }\n        while (frames--) {\n            this.dispatchEvent(event);\n        }\n        return this;\n    },\n    /**\n     * タイムラインの実行を一時停止する\n     */\n    pause: function() {\n        if (!this.paused) {\n            this.paused = true;\n            this._deactivateTimeline();\n        }\n        return this;\n    },\n    /**\n     * タイムラインの実行を再開する\n     */\n    resume: function() {\n        if (this.paused) {\n            this.paused = false;\n            this._activateTimeline();\n        }\n        return this;\n    },\n    /**\n     * タイムラインをループさせる。\n     * ループしているときに終了したアクションは、タイムラインから取り除かれた後\n     * 再度タイムラインに追加される。このアクションは、ループが解除されても残る。\n     */\n    loop: function() {\n        this.looped = true;\n        return this;\n    },\n    /**\n     * タイムラインのループを解除する。\n     */\n    unloop: function() {\n        this.looped = false;\n        return this;\n    },\n    /**\n     * 指定したフレーム数だけ待ち、何もしないアクションを追加する。\n     * @param time\n     */\n    delay: function(time) {\n        this.add(new enchant.Action({\n            time: time\n        }));\n        return this;\n    },\n    /**\n     * @ignore\n     * @param time\n     */\n    wait: function(time) {\n        // reserved\n        return this;\n    },\n    /**\n     * 関数を実行し、即時に次のアクションに移るアクションを追加する。\n     * @param func\n     */\n    then: function(func) {\n        var timeline = this;\n        this.add(new enchant.Action({\n            onactiontick: function(evt) {\n                func.call(timeline.node);\n            },\n            // if time is 0, next action will be immediately executed\n            time: 0\n        }));\n        return this;\n    },\n    /**\n     * then メソッドのシノニム。\n     * 関数を実行し、即時に次のアクションに移る。\n     * @param func\n     */\n    exec: function(func) {\n        this.then(func);\n    },\n    /**\n     * 実行したい関数を、フレーム数をキーとした連想配列(オブジェクト)で複数指定し追加する。\n     * 内部的には delay, then を用いている。\n     *\n     * @example\n     * sprite.tl.cue({\n     *    10: function(){ 10フレーム経過した後に実行される関数 },\n     *    20: function(){ 20フレーム経過した後に実行される関数 },\n     *    30: function(){ 30フレーム経過した後に実行される関数 }\n     * });\n     * @param cue キューオブジェクト\n     */\n    cue: function(cue) {\n        var ptr = 0;\n        for (var frame in cue) {\n            if (cue.hasOwnProperty(frame)) {\n                this.delay(frame - ptr);\n                this.then(cue[frame]);\n                ptr = frame;\n            }\n        }\n    },\n    /**\n     * ある関数を指定したフレーム数繰り返し実行するアクションを追加する。\n     * @param func 実行したい関数\n     * @param time 持続フレーム数\n     */\n    repeat: function(func, time) {\n        this.add(new enchant.Action({\n            onactiontick: function(evt) {\n                func.call(this);\n            },\n            time: time\n        }));\n        return this;\n    },\n    /**\n     * 複数のアクションを並列で実行したいときに指定する。\n     * and で結ばれたすべてのアクションが終了するまで次のアクションには移行しない\n     * @example\n     * sprite.tl.fadeIn(30).and.rotateBy(360, 30);\n     * 30フレームでフェードインしながら 360度回転する\n     */\n    and: function() {\n        var last = this.queue.pop();\n        if (last instanceof enchant.ParallelAction) {\n            this._parallel = last;\n            this.queue.push(last);\n        } else {\n            var parallel = new enchant.ParallelAction();\n            parallel.actions.push(last);\n            this.queue.push(parallel);\n            this._parallel = parallel;\n        }\n        return this;\n    },\n    /**\n     * @ignore\n     */\n    or: function() {\n        return this;\n    },\n    /**\n     * @ignore\n     */\n    doAll: function(children) {\n        return this;\n    },\n    /**\n     * @ignore\n     */\n    waitAll: function() {\n        return this;\n    },\n    /**\n     * true値 が返るまで、関数を毎フレーム実行するアクションを追加する。\n     * @example\n     * sprite.tl.waitUntil(function(){\n     *    return this.x-- < 0\n     * }).then(function(){ .. });\n     * // x 座標が負になるまで毎フレーム x座標を減算し続ける\n     *\n     * @param func 実行したい関数\n     */\n    waitUntil: function(func) {\n        var timeline = this;\n        this.add(new enchant.Action({\n            onactionstart: func,\n            onactiontick: function(evt) {\n                if (func.call(this)) {\n                    timeline.next();\n                }\n            }\n        }));\n        return this;\n    },\n    /**\n     * Entity の不透明度をなめらかに変えるアクションを追加する。\n     * @param opacity 目標の不透明度\n     * @param time フレーム数\n     * @param [easing] イージング関数\n     */\n    fadeTo: function(opacity, time, easing) {\n        this.tween({\n            opacity: opacity,\n            time: time,\n            easing: easing\n        });\n        return this;\n    },\n    /**\n     * Entity をフェードインするアクションを追加する。\n     * fadeTo(1) のエイリアス。\n     * @param time フレーム数\n     * @param [easing] イージング関数\n     */\n    fadeIn: function(time, easing) {\n        return this.fadeTo(1, time, easing);\n    },\n    /**\n     * Entity をフェードアウトするアクションを追加する。\n     * fadeTo(1) のエイリアス。\n     * @param time フレーム数\n     * @param [easing] イージング関数\n     */\n    fadeOut: function(time, easing) {\n        return this.fadeTo(0, time, easing);\n    },\n    /**\n     * Entity の位置をなめらかに移動させるアクションを追加する。\n     * @param x 目標のx座標\n     * @param y 目標のy座標\n     * @param time フレーム数\n     * @param [easing] イージング関数\n     */\n    moveTo: function(x, y, time, easing) {\n        return this.tween({\n            x: x,\n            y: y,\n            time: time,\n            easing: easing\n        });\n    },\n    /**\n     * Entity のx座標をなめらかに変化させるアクションを追加する。\n     * @param x\n     * @param time\n     * @param [easing]\n     */\n    moveX: function(x, time, easing) {\n        return this.tween({\n            x: x,\n            time: time,\n            easing: easing\n        });\n    },\n    /**\n     * Entity のy座標をなめらかに変化させるアクションを追加する。\n     * @param y\n     * @param time\n     * @param [easing]\n     */\n    moveY: function(y, time, easing) {\n        return this.tween({\n            y: y,\n            time: time,\n            easing: easing\n        });\n    },\n    /**\n     * Entity の位置をなめらかに変化させるアクションを追加する。\n     * 座標は、アクション開始時からの相対座標で指定する。\n     * @param x\n     * @param y\n     * @param time\n     * @param [easing]\n     */\n    moveBy: function(x, y, time, easing) {\n        return this.tween({\n            x: function() {\n                return this.x + x;\n            },\n            y: function() {\n                return this.y + y;\n            },\n            time: time,\n            easing: easing\n        });\n    },\n    /**\n     * Entity の opacity を0にする (即時)\n     */\n    hide: function() {\n        return this.then(function() {\n            this.opacity = 0;\n        });\n    },\n    /**\n     * Entity の opacity を1にする (即時)\n     */\n    show: function() {\n        return this.then(function() {\n            this.opacity = 1;\n        });\n    },\n    /**\n     * Entity をシーンから削除する。\n     * シーンから削除された場合、 enterframe イベントは呼ばれなくなるので、\n     * タイムラインも止まることに注意。\n     * これ以降のアクションは、再度シーンに追加されるまで実行されない。\n     */\n    removeFromScene: function() {\n        return this.then(function() {\n            this.scene.removeChild(this);\n        });\n    },\n    /**\n     * Entity をなめらかに拡大・縮小するアクションを追加する。\n     * @param scaleX 縮尺\n     * @param [scaleY] 縮尺。省略した場合 scaleX と同じ\n     * @param time\n     * @param [easing]\n     */\n    scaleTo: function(scale, time, easing) {\n        if (typeof easing === \"number\") {\n            return this.tween({\n                scaleX: arguments[0],\n                scaleY: arguments[1],\n                time: arguments[2],\n                easing: arguments[3]\n            });\n        }\n        return this.tween({\n            scaleX: scale,\n            scaleY: scale,\n            time: time,\n            easing: easing\n        });\n    },\n    /**\n     * Entity をなめらかに拡大・縮小させるアクションを追加する。\n     * 相対縮尺 (ex. アクション開始時の縮尺の n 倍) で指定する。\n     * @param scaleX 相対縮尺\n     * @param [scaleY] 相対縮尺。省略した場合 scaleX と同じ\n     * @param time\n     * @param [easing]\n     */\n    scaleBy: function(scale, time, easing) {\n        if (typeof easing === \"number\") {\n            return this.tween({\n                scaleX: function() {\n                    return this.scaleX * arguments[0];\n                },\n                scaleY: function() {\n                    return this.scaleY * arguments[1];\n                },\n                time: arguments[2],\n                easing: arguments[3]\n            });\n        }\n        return this.tween({\n            scaleX: function() {\n                return this.scaleX * scale;\n            },\n            scaleY: function() {\n                return this.scaleY * scale;\n            },\n            time: time,\n            easing: easing\n        });\n    },\n    /**\n     * Entity をなめらかに回転させるアクションを追加する。\n     * @param deg 目標の回転角度 (弧度法: 1回転を 360 とする)\n     * @param time フレーム数\n     * @param [easing] イージング関数\n     */\n    rotateTo: function(deg, time, easing) {\n        return this.tween({\n            rotation: deg,\n            time: time,\n            easing: easing\n        });\n    },\n    /**\n     * Entity をなめらかに回転させるアクションを追加する。\n     * 角度は相対角度 (アクション開始時の角度から更に n 度) で指定する\n     * @param deg 目標の相対角度 (弧度法: 1回転を 360 とする)\n     * @param time フレーム数\n     * @param [easing] イージング関数\n     */\n    rotateBy: function(deg, time, easing) {\n        return this.tween({\n            rotation: function() {\n                return this.rotation + deg;\n            },\n            time: time,\n            easing: easing\n        });\n    }\n});\n\n/**\n * @scope enchant.Action.prototype\n * @type {*}\n */\n\nenchant.Action = enchant.Class.create(enchant.ActionEventTarget, {\n    /**\n     * @name enchant.Action\n     * @class\n     * アニメーションタイムラインを構成する、実行したい処理を指定するためのクラス.\n     *\n     * タイムラインに追加されたアクションは順に実行される。\n     * アクションが開始・終了された時に actionstart, actionend イベントが発行され、\n     * また1フレーム経過した時には actiontick イベントが発行される。\n     * これらのイベントのリスナとして実行したい処理を指定する。\n     *\n     * time で指定されたフレーム数が経過すると自動的に次のアクションに移行するが、\n     * null が指定されると、タイムラインの next メソッドが呼ばれるまで移行しない。\n     * @constructs\n     * @param param\n     * @config {integer} [time] アクションが持続するフレーム数。 null が指定されると無限長\n     * @config {function} [onactionstart] アクションが開始される時のイベントリスナ\n     * @config {function} [onactiontick] アクションが1フレーム経過するときのイベントリスナ\n     * @config {function} [onactionend] アクションがが終了する時のイベントリスナ\n     * @constructs\n     */\n    initialize: function(param) {\n        enchant.ActionEventTarget.call(this);\n        this.time = null;\n        this.frame = 0;\n        for (var key in param) {\n            if (param.hasOwnProperty(key)) {\n                if (param[key] != null) {\n                    this[key] = param[key];\n                }\n            }\n        }\n        var action = this;\n\n        this.timeline = null;\n        this.node = null;\n\n        this.addEventListener(enchant.Event.ADDED_TO_TIMELINE, function(evt) {\n            action.timeline = evt.timeline;\n            action.node = evt.timeline.node;\n            action.frame = 0;\n        });\n\n        this.addEventListener(enchant.Event.REMOVED_FROM_TIMELINE, function() {\n            action.timeline = null;\n            action.node = null;\n            action.frame = 0;\n        });\n\n        this.addEventListener(enchant.Event.ACTION_TICK, function(evt) {\n            var remaining = action.time - (action.frame + evt.elapsed);\n            if (action.time != null && remaining <= 0) {\n                action.frame = action.time;\n                evt.timeline.next(-remaining);\n            } else {\n                action.frame += evt.elapsed;\n            }\n        });\n\n    }\n});\n\n/**\n * @scope enchant.ParallelAction.prototype\n */\nenchant.ParallelAction = enchant.Class.create(enchant.Action, {\n    /**\n     * @name enchant.ParallelAction\n     * @class\n     * アクションを並列で実行するためのアクション。\n     * 子アクションを複数持つことができる。\n     * @constructs\n     * @extends enchant.Action\n     */\n    initialize: function(param) {\n        enchant.Action.call(this, param);\n        var timeline = this.timeline;\n        var node = this.node;\n        /**\n         * 子アクション\n         */\n        this.actions = [];\n        /**\n         * 実行が終了したアクション\n         */\n        this.endedActions = [];\n        var that = this;\n\n        this.addEventListener(enchant.Event.ACTION_START, function(evt) {\n            for (var i = 0, len = that.actions.length; i < len; i++) {\n                that.actions[i].dispatchEvent(evt);\n            }\n        });\n\n        this.addEventListener(enchant.Event.ACTION_TICK, function(evt) {\n            var i, len, timeline = {\n                next: function(remaining) {\n                    var action = that.actions[i];\n                    that.actions.splice(i--, 1);\n                    len = that.actions.length;\n                    that.endedActions.push(action);\n\n                    var e = new enchant.Event(\"actionend\");\n                    e.timeline = this;\n                    action.dispatchEvent(e);\n\n                    e = new enchant.Event(\"removedfromtimeline\");\n                    e.timeline = this;\n                    action.dispatchEvent(e);\n                }\n            };\n\n            var e = new enchant.Event(\"actiontick\");\n            e.timeline = timeline;\n            e.elapsed = evt.elapsed;\n            for (i = 0, len = that.actions.length; i < len; i++) {\n                that.actions[i].dispatchEvent(e);\n            }\n\n            if (that.actions.length === 0) {\n                evt.timeline.next();\n            }\n        });\n\n        this.addEventListener(enchant.Event.ADDED_TO_TIMELINE, function(evt) {\n            for (var i = 0, len = that.actions.length; i < len; i++) {\n                that.actions[i].dispatchEvent(evt);\n            }\n        });\n\n        this.addEventListener(enchant.Event.REMOVED_FROM_TIMELINE, function() {\n            this.actions = this.endedActions;\n            this.endedActions = [];\n        });\n\n    }\n});\n\n/**\n * @scope enchant.Tween.prototype\n */\nenchant.Tween = enchant.Class.create(enchant.Action, {\n    /**\n     * @name enchant.Tween\n     * @class\n     * {@link enchant.Action} を継承した、オブジェクトの特定のプロパティを、なめらかに変更したい時に用いるためのアクションクラス.\n     * アクションを扱いやすく拡張したクラス.\n     *\n     * コンストラクタに渡す設定オブジェクトに、プロパティの目標値を指定すると、\n     * アクションが実行された時に、目標値までなめらかに値を変更するようなアクションを生成する。\n     *\n     * トゥイーンのイージングも、easing プロパティで指定できる。\n     * デフォルトでは enchant.Easing.LINEAR が指定されている。\n     *\n     * @param params\n     * @constructs\n     * @config {time}\n     * @config {easing} [function]\n     */\n    initialize: function(params) {\n        var origin = {};\n        var target = {};\n        enchant.Action.call(this, params);\n\n        if (this.easing == null) {\n            // linear\n            this.easing = function(t, b, c, d) {\n                return c * t / d + b;\n            };\n        }\n\n        var tween = this;\n        this.addEventListener(enchant.Event.ACTION_START, function() {\n            // excepted property\n            var excepted = [\"frame\", \"time\", \"callback\", \"onactiontick\", \"onactionstart\", \"onactionend\"];\n            for (var prop in params) {\n                if (params.hasOwnProperty(prop)) {\n                    // if function is used instead of numerical value, evaluate it\n                    var target_val;\n                    if (typeof params[prop] === \"function\") {\n                        target_val = params[prop].call(tween.node);\n                    } else {\n                        target_val = params[prop];\n                    }\n\n                    if (excepted.indexOf(prop) === -1) {\n                        origin[prop] = tween.node[prop];\n                        target[prop] = target_val;\n                    }\n                }\n            }\n        });\n\n        this.addEventListener(enchant.Event.ACTION_TICK, function(evt) {\n            // if time is 0, set property to target value immediately\n            var ratio = tween.time === 0 ? 1 : tween.easing(Math.min(tween.time,tween.frame + evt.elapsed), 0, 1, tween.time) - tween.easing(tween.frame, 0, 1, tween.time);\n\n            for (var prop in target){\n                if (target.hasOwnProperty(prop)) {\n                    if (typeof this[prop] === \"undefined\"){\n                        continue;\n                    }\n                    tween.node[prop] += (target[prop] - origin[prop]) * ratio;\n                    if (Math.abs(tween.node[prop]) < 10e-8){\n                        tween.node[prop] = 0;\n                    }\n                }\n            }\n        });\n    }\n});\n\n/**\n *\n */\n}(window));\n"]],"start1":0,"start2":0,"length1":0,"length2":200615}]],"length":200615}
